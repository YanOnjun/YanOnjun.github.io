<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Controller层的优化</title>
    <url>/2023/05/06/Java/Contoller%E5%B1%82%E7%9A%84%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给Controller层的工作有以下几项：</p>
<ul>
<li>解析请求参数</li>
<li>调用service执行业务代码</li>
<li>捕获异常和执行成功返回</li>
</ul>
<p>在这样的工作开发controller会存在以下<strong>问题</strong>：</p>
<ul>
<li><p>异常反馈和成功相应结果返回不统一，接口不友好</p>
</li>
<li><p>参数校验耦合业务，违背单一职责</p>
</li>
</ul>
<span id="more"></span>

<h1 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h1><h2 id="统一返回结构"><a href="#统一返回结构" class="headerlink" title="统一返回结构"></a>统一返回结构</h2><p>一般来说，返回结构需要表现得清晰，让对接接口的人清楚是否调用成功，而不是通过返回一些空值、异常值来判断。</p>
<p>常用的做法是使用一个状态码，信息，和返回数据组成一组返回数据，可以更清楚的了解到接口调用的情况。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回结果的枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultEnum</span>&#123;</span><br><span class="line">    </span><br><span class="line">    SUCCESS(<span class="number">20001</span>, <span class="string">&quot;接口调用成功&quot;</span>),</span><br><span class="line">    VALIDATE_FAILED(<span class="number">40001</span>, <span class="string">&quot;参数校验失败&quot;</span>),</span><br><span class="line">    COMMON_FAILED(<span class="number">40000</span>, <span class="string">&quot;接口调用失败&quot;</span>),</span><br><span class="line">    NO_AUTH(<span class="number">40100</span>, <span class="string">&quot;没有访问权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    NOT_LOGIN(<span class="number">40101</span>, <span class="string">&quot;没有登录&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ResultEnum</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回结果</span></span><br><span class="line"><span class="comment"> * 这里用到了 lombok 没有引入 lombok 的 需要自己写一下构造器和get set方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ResultEnum.SUCCESS.getCode(), ResultEnum.SUCCESS.getMessage(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(String message, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ResultEnum.SUCCESS.getCode(), message, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;?&gt; failed(String message) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(ResultEnum.COMMON_FAILED.getCode(), message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;?&gt; failed(BusinessException errorResult) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(errorResult.getCode(), errorResult.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">instance</span><span class="params">(Integer code, String message, T data)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就是定义好了返回的结构了</p>
<p>但是要在代码中每一个方法都去写一个重复的使用返回结果的代码会很麻烦</p>
<p>我们可以统一包装处理进行返回</p>
<h2 id="包装返回"><a href="#包装返回" class="headerlink" title="包装返回"></a>包装返回</h2><p>Spring 提供了一个类 ResponseBodyAdvice </p>
<p>这个类是对 Controller 层返回的内容在 HttpMessageConverter 进行类型转换之前进行拦截，在这个类中完成相应的处理之后，再返回结果，在这个流程中，就可以对返回的结果包装到 Result 里面。</p>
<p>ResponseBodyAdvice 有两个方法：</p>
<ul>
<li>supports：判断是否要交给 beforeBodyWrite 方法执行</li>
<li>beforeBodyWrite：对 response 进行具体的处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;controller包的地址&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseAdvice</span> <span class="keyword">implements</span> <span class="title class_">ResponseBodyAdvice</span>&lt;Object&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 处理 String 类型的返回值时 会出现问题: xxx.包装类 cannot be cast to java.lang.String</span></span><br><span class="line"><span class="comment">     * String 类型的 selectedConverterType 参数值是 org.springframework.http.converter.StringHttpMessageConverter</span></span><br><span class="line"><span class="comment">     * 而其他数据类型的值是 org.springframework.http.converter.json.MappingJackson2HttpMessageConverter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">beforeBodyWrite</span><span class="params">(Object data, MethodParameter returnType, MediaType selectedContentType,</span></span><br><span class="line"><span class="params">            Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType, ServerHttpRequest request, ServerHttpResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果返回值是 Result 类型 则不再进行处理</span></span><br><span class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Result) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否要交给beforeBodyWrite处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用这种方式就可以完成在返回结果之前，包装好返回的内容</p>
<p>但是使用这个在返回类型为 String 的情况下会出现一点问题，在 beforeBodyWrite 中描述了问题原因，而这个原因是因为转换器的顺序导致的 所以我们需要在配置中调换一下转换器的顺序，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Configuration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换 MappingJackson2HttpMessageConverter 到 HttpMessageConverter 的第一位 防止出现使用 StringHttpMessageConverter 的情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; converters.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 找到 MappingJackson2HttpMessageConverter 并且与第一个进行交换</span></span><br><span class="line">            <span class="keyword">if</span> (converters.get(i) <span class="keyword">instanceof</span> MappingJackson2HttpMessageConverter) &#123;</span><br><span class="line">                HttpMessageConverter&lt;?&gt; converter = converters.get(i);</span><br><span class="line">                converters.set(i, converters.get(<span class="number">0</span>));</span><br><span class="line">                converters.set(<span class="number">0</span>, converter);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>成功结果响应就完成了</p>
<h2 id="异常响应"><a href="#异常响应" class="headerlink" title="异常响应"></a>异常响应</h2><p>对于异常结果也需要进行包装返回，并且要屏蔽掉报错的栈信息，避免暴露出服务的内部情况。而且对于抛出错误的返回，与成功返回结果结构是不一致的。</p>
<p>对此需要自定义异常和对异常进行拦截返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ResultEnum result)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(result.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.code = result.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = result.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(ResultEnum result, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = result.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常拦截</p>
<p>这里异常处理的流程比较简单，可以根据情况进行补充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">     <span class="keyword">public</span> Result&lt;?&gt; handlerBusinessException(BusinessException e) &#123;</span><br><span class="line">         <span class="keyword">return</span> Result.failed(e);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; handlerRuntimeException(RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.failed(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解析请求参数"><a href="#解析请求参数" class="headerlink" title="解析请求参数"></a>解析请求参数</h2>]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang</title>
    <url>/2023/03/26/Golang/Golang/</url>
    <content><![CDATA[<p>Golang官方教程  <a href="https://tour.go-zh.org/welcome/1">https://tour.go-zh.org/welcome/1</a></p>
<h1 id="包、变量和函数"><a href="#包、变量和函数" class="headerlink" title="包、变量和函数"></a>包、变量和函数</h1><p>每个 Go 程序都是由包构成的。</p>
<p>程序从 <code>main</code> 包开始运行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>此代码用圆括号组合了导入，这是“分组”形式的导入语句。</p>
<p>当然你也可以编写多个导入语句，例如：</p>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br></pre></td></tr></table></figure>

<p>不过使用分组导入语句是更好的形式。</p>
<p>在 Go 中，如果一个名字以大写字母开头，那么它就是已导出的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">math.Pi</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数可以没有参数或接受多个参数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当连续两个或多个函数的已命名形参类型相同时，除最后一个类型以外，其它都可以省略。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数可以返回任意数量的返回值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。</p>
<p>没有参数的 <code>return</code> 语句返回已命名的返回值。也就是 <code>直接</code> 返回。</p>
<p>直接返回语句应当仅用在下面这样的短函数中。在长的函数中它们会影响代码的可读性。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="type">int</span>)</span></span> (x, y <span class="type">int</span>) &#123;</span><br><span class="line">	x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">	y = sum - x</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><code>var</code> 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后。</p>
<p><code>var</code> 语句可以出现在包或函数级别。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c, python, java <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">	fmt.Println(i, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量声明可以包含初始值，每个变量对应一个。</p>
<p>如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br><span class="line">	fmt.Println(i, j, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有明确初始值的变量声明会被赋予它们的 <strong>零值</strong>。</p>
<p>零值是：</p>
<ul>
<li>数值类型为 <code>0</code>，</li>
<li>布尔类型为 <code>false</code>，</li>
<li>字符串为 <code>&quot;&quot;</code>（空字符串）。</li>
</ul>
<p>在函数中，简洁赋值语句 <code>:=</code> 可在类型明确的地方代替 <code>var</code> 声明。</p>
<p>函数外的每个语句都必须以关键字开始（<code>var</code>, <code>func</code> 等等），因此 <code>:=</code> 结构不能在函数外使用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i, j <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">	k := <span class="number">3</span></span><br><span class="line">	c, python, java := <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(i, j, k, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>Go 的基本类型有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool</span><br><span class="line"></span><br><span class="line">string</span><br><span class="line"></span><br><span class="line">int  int8  int16  int32  int64</span><br><span class="line">uint uint8 uint16 uint32 uint64 uintptr</span><br><span class="line"></span><br><span class="line">byte // uint8 的别名</span><br><span class="line"></span><br><span class="line">rune // int32 的别名</span><br><span class="line">    // 表示一个 Unicode 码点</span><br><span class="line"></span><br><span class="line">float32 float64</span><br><span class="line"></span><br><span class="line">complex64 complex128</span><br></pre></td></tr></table></figure>

<p><code>int</code>, <code>uint</code> 和 <code>uintptr</code> 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽。 当你需要一个整数值时应使用 <code>int</code> 类型</p>
<p> 同导入语句一样，变量声明也可以“分组”成一个语法块</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	ToBe   <span class="type">bool</span>       = <span class="literal">false</span></span><br><span class="line">	MaxInt <span class="type">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">	z      <span class="type">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h2><p>Go 在不同类型的项之间赋值时需要显式转换</p>
<p>表达式 <code>T(v)</code> 将值 <code>v</code> 转换为类型 <code>T</code>。</p>
<p>一些关于数值的转换：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure>

<p>或者，更加简单的形式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i := <span class="number">42</span></span><br><span class="line">f := <span class="type">float64</span>(i)</span><br><span class="line">u := <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量的声明与变量类似，只不过是使用 <code>const</code> 关键字。</p>
<p>常量可以是字符、字符串、布尔值或数值。</p>
<p>常量不能用 <code>:=</code> 语法声明。</p>
<h1 id="流程控制语句：for、if、else、switch-和-defer"><a href="#流程控制语句：for、if、else、switch-和-defer" class="headerlink" title="流程控制语句：for、if、else、switch 和 defer"></a>流程控制语句：for、if、else、switch 和 defer</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>Go 只有一种循环结构：<code>for</code> 循环。</p>
<p>基本的 <code>for</code> 循环由三部分组成，它们用分号隔开：</p>
<ul>
<li>初始化语句：在第一次迭代前执行</li>
<li>条件表达式：在每次迭代前求值</li>
<li>后置语句：在每次迭代的结尾执行</li>
</ul>
<p>初始化语句通常为一句短变量声明，该变量声明仅在 <code>for</code> 语句的作用域中可见。</p>
<p>一旦条件表达式的布尔值为 <code>false</code>，循环迭代就会终止。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">	sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化语句和后置语句可以去掉 此时分号也可以去掉  类似while</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> sum&lt;<span class="number">1000</span> &#123;</span><br><span class="line">	sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>省略条件则形成无限循环</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>Go 的 <code>if</code> 语句表达式外无需小括号 <code>( )</code> ，而大括号 <code>&#123; &#125;</code> 则是必须的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sqrt(-x) + <span class="string">&quot;i&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>if</code> 语句可以在条件表达式前执行一个简单的语句。该语句声明的变量作用域仅在 <code>if</code> 和 <code>else</code> 之内</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line">    <span class="keyword">return</span> v + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p><code>switch</code> 是编写一连串 <code>if - else</code> 语句的简便方法。它运行第一个值等于条件表达式的 case 语句</p>
<p> Go 只运行选定的 case，而非之后所有的 case。Go 自动提供了在这些语言中每个 case 后面所需的 <code>break</code> 语句,除非以 <code>fallthrough</code> 语句结束，否则分支会自动终止。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;darwin&quot;</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;OS X.&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;Linux.&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="comment">// freebsd, openbsd,</span></span><br><span class="line">		<span class="comment">// plan9, windows...</span></span><br><span class="line">		fmt.Printf(<span class="string">&quot;%s.\n&quot;</span>, os)</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<p>没有条件的 switch 同 <code>switch true</code> 一样。</p>
<p>这种形式能将一长串 if-then-else 写得更加清晰。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;Good morning!&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> t.Hour() &lt; <span class="number">17</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;Good afternoon.&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;Good evening.&quot;</span>)</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>defer 语句会将函数推迟到外层函数返回之后执行。</p>
<p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hello</span></span><br><span class="line"><span class="comment">//world</span></span><br></pre></td></tr></table></figure>

<p>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;counting&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="更多类型：struct、slice-和映射"><a href="#更多类型：struct、slice-和映射" class="headerlink" title="更多类型：struct、slice 和映射"></a>更多类型：struct、slice 和映射</h1><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>Go 拥有指针。指针保存了值的内存地址。</p>
<p>类型 <code>*T</code> 是指向 <code>T</code> 类型值的指针。其零值为 <code>nil</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var p *int</span><br></pre></td></tr></table></figure>

<p><code>&amp;</code> 操作符会生成一个指向其操作数的指针。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i := 42</span><br><span class="line">p = &amp;i</span><br></pre></td></tr></table></figure>

<p><code>*</code> 操作符表示指针指向的底层值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Println(*p) // 通过指针 p 读取 i</span><br><span class="line">*p = 21         // 通过指针 p 设置 i</span><br></pre></td></tr></table></figure>

<p>这也就是通常所说的“间接引用”或“重定向”。</p>
<p>Go 没有指针运算。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i, j := <span class="number">42</span>, <span class="number">2701</span></span><br><span class="line"></span><br><span class="line">	p := &amp;i         <span class="comment">// 指向 i</span></span><br><span class="line">	fmt.Println(*p) <span class="comment">// 通过指针读取 i 的值</span></span><br><span class="line">	*p = <span class="number">21</span>         <span class="comment">// 通过指针设置 i 的值</span></span><br><span class="line">	fmt.Println(i)  <span class="comment">// 查看 i 的值</span></span><br><span class="line"></span><br><span class="line">	p = &amp;j         <span class="comment">// 指向 j</span></span><br><span class="line">	*p = *p / <span class="number">37</span>   <span class="comment">// 通过指针对 j 进行除法运算</span></span><br><span class="line">	fmt.Println(j) <span class="comment">// 查看 j 的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>一个结构体（<code>struct</code>）就是一组字段（field）。</p>
<p>结构体字段使用点号来访问。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X <span class="type">int</span></span><br><span class="line">	Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    v.X = <span class="number">4</span></span><br><span class="line">	fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体字段可以通过结构体指针来访问。</p>
<p>如果我们有一个指向结构体的指针 <code>p</code>，那么可以通过 <code>(*p).X</code> 来访问其字段 <code>X</code>。不过这么写太啰嗦了，所以语言也允许我们使用隐式间接引用，直接写 <code>p.X</code> 就可以。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	p := &amp;v</span><br><span class="line">	p.X = <span class="number">1e9</span></span><br><span class="line">	fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体文法通过直接列出字段的值来新分配一个结构体。</p>
<p>使用 <code>Name:</code> 语法可以仅列出部分字段。（字段名的顺序无关。）</p>
<p>特殊的前缀 <code>&amp;</code> 返回一个指向结构体的指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// 创建一个 Vertex 类型的结构体</span></span><br><span class="line">	v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 被隐式地赋予</span></span><br><span class="line">	v3 = Vertex&#123;&#125;      <span class="comment">// X:0 Y:0</span></span><br><span class="line">	p  = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 创建一个 *Vertex 类型的结构体（指针）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>类型 <code>[n]T</code> 表示拥有 <code>n</code> 个 <code>T</code> 类型的值的数组。</p>
<p>表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a [10]int</span><br></pre></td></tr></table></figure>

<p>会将变量 <code>a</code> 声明为拥有 10 个整数的数组。</p>
<p>数组的长度是其类型的一部分，因此数组不能改变大小。</p>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>每个数组的大小都是固定的。而切片则为数组元素提供动态大小的、灵活的视角。在实践中，切片比数组更常用。</p>
<p>类型 <code>[]T</code> 表示一个元素类型为 <code>T</code> 的切片。</p>
<p>切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a[low : high]</span><br></pre></td></tr></table></figure>

<p>它会选择一个半开区间，包括第一个元素，但排除最后一个元素。</p>
<p>以下表达式创建了一个切片，它包含 <code>a</code> 中下标从 1 到 3 的元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a[1:4]</span><br></pre></td></tr></table></figure>

<p>切片并不存储任何数据，它只是描述了底层数组中的一段。</p>
<p>更改切片的元素会修改其底层数组中对应的元素。</p>
<p>与它共享底层数组的切片都会观测到这些修改。</p>
<p>切片文法类似于没有长度的数组文法。</p>
<p>这是一个数组文法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3]bool&#123;true, true, false&#125;</span><br></pre></td></tr></table></figure>

<p>下面这样则会创建一个和上面相同的数组，然后构建一个引用了它的切片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[]bool&#123;true, true, false&#125;</span><br></pre></td></tr></table></figure>



<p>在进行切片时，你可以利用它的默认行为来忽略上下界。</p>
<p>切片下界的默认值为 <code>0</code>，上界则是该切片的长度。</p>
<p>对于数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a [10]int</span><br></pre></td></tr></table></figure>

<p>来说，以下切片是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a[0:10]</span><br><span class="line">a[:10]</span><br><span class="line">a[0:]</span><br><span class="line">a[:]</span><br></pre></td></tr></table></figure>

<p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。</p>
<p>切片的长度就是它所包含的元素个数。</p>
<p>切片的容量是从切片的第一个元素开始数，到其底层数组元素末尾的个数。</p>
<p>切片 <code>s</code> 的长度和容量可通过表达式 <code>len(s)</code> 和 <code>cap(s)</code> 来获取。</p>
<p>切片的零值是 <code>nil</code>。</p>
<p>nil 切片的长度和容量为 0 且没有底层数组。</p>
<p><strong>用 make 创建切片</strong></p>
<p>切片可以用内建函数 <code>make</code> 来创建，这也是你创建动态数组的方式。</p>
<p><code>make</code> 函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a := make([]int, 5)  // len(a)=5</span><br></pre></td></tr></table></figure>

<p>要指定它的容量，需向 <code>make</code> 传入第三个参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b := make([]int, 0, 5) // len(b)=0, cap(b)=5</span><br></pre></td></tr></table></figure>



<p>为切片追加新的元素是种常用的操作，为此 Go 提供了内建的 <code>append</code> 函数。内建函数的<a href="https://go-zh.org/pkg/builtin/#append">文档</a>对此函数有详细的介绍。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func append(s []T, vs ...T) []T</span><br></pre></td></tr></table></figure>

<p><code>append</code> 的第一个参数 <code>s</code> 是一个元素类型为 <code>T</code> 的切片，其余类型为 <code>T</code> 的值将会追加到该切片的末尾。</p>
<p><code>append</code> 的结果是一个包含原切片所有元素加上新添加元素的切片。</p>
<p>当 <code>s</code> 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组。</p>
<p><strong>文章 <a href="https://blog.go-zh.org/go-slices-usage-and-internals">Go 切片：用法和本质</a>。</strong></p>
<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p><code>for</code> 循环的 <code>range</code> 形式可遍历切片或映射。</p>
<p>当使用 <code>for</code> 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pow = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;2**%d = %d\n&quot;</span>, i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以将下标或值赋予 <code>_</code> 来忽略它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i, _ := range pow</span><br><span class="line">for _, value := range pow</span><br></pre></td></tr></table></figure>

<p>若只需要索引，忽略第二个变量即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i := range pow</span><br></pre></td></tr></table></figure>

<h2 id="练习：切片"><a href="#练习：切片" class="headerlink" title="练习：切片"></a>练习：切片</h2><p>实现 <code>Pic</code>。它应当返回一个长度为 <code>dy</code> 的切片，其中每个元素是一个长度为 <code>dx</code>，元素类型为 <code>uint8</code> 的切片。当你运行此程序时，它会将每个整数解释为灰度值（好吧，其实是蓝度值）并显示它所对应的图像。</p>
<p>图像的选择由你来定。几个有趣的函数包括 <code>(x+y)/2</code>, <code>x*y</code>, <code>x^y</code>, <code>x*log(y)</code> 和 <code>x%(y+1)</code>。</p>
<p>（提示：需要使用循环来分配 <code>[][]uint8</code> 中的每个 <code>[]uint8</code>；请使用 <code>uint8(intValue)</code> 在类型之间转换；你可能会用到 <code>math</code> 包中的函数。）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;golang.org/x/tour/pic&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pic</span><span class="params">(dx, dy <span class="type">int</span>)</span></span> [][]<span class="type">uint8</span> &#123;</span><br><span class="line">	dySlice := [][]<span class="type">uint8</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;dy; i++ &#123;</span><br><span class="line">		dxSlice := <span class="built_in">make</span>([]<span class="type">uint8</span>,dx)</span><br><span class="line">		<span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;dx; j++ &#123;</span><br><span class="line">			dxSlice[j] = <span class="type">uint8</span>((i%(j+<span class="number">1</span>)))</span><br><span class="line">		&#125;</span><br><span class="line">		dySlice = <span class="built_in">append</span>(dySlice, dxSlice)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dySlice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	pic.Show(Pic)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>映射将键映射到值。</p>
<p>映射的零值为 <code>nil</code> 。<code>nil</code> 映射既没有键，也不能添加键。</p>
<p><code>make</code> 函数会返回给定类型的映射，并将其初始化备用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	Lat, Long <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]Vertex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]Vertex)</span><br><span class="line">	m[<span class="string">&quot;Bell Labs&quot;</span>] = Vertex&#123;</span><br><span class="line">		<span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(m[<span class="string">&quot;Bell Labs&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在映射 <code>m</code> 中插入或修改元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m[key] = elem</span><br></pre></td></tr></table></figure>

<p>获取元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elem = m[key]</span><br></pre></td></tr></table></figure>

<p>删除元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete(m, key)</span><br></pre></td></tr></table></figure>

<p>通过双赋值检测某个键是否存在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elem, ok = m[key]</span><br></pre></td></tr></table></figure>

<p>若 <code>key</code> 在 <code>m</code> 中，<code>ok</code> 为 <code>true</code> ；否则，<code>ok</code> 为 <code>false</code>。</p>
<p>若 <code>key</code> 不在映射中，那么 <code>elem</code> 是该映射元素类型的零值。</p>
<p>同样的，当从映射中读取某个不存在的键时，结果是映射的元素类型的零值。</p>
<h2 id="练习：映射"><a href="#练习：映射" class="headerlink" title="练习：映射"></a>练习：映射</h2><p>实现 <code>WordCount</code>。它应当返回一个映射，其中包含字符串 <code>s</code> 中每个“单词”的个数。函数 <code>wc.Test</code> 会对此函数执行一系列测试用例，并输出成功还是失败。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WordCount</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> &#123;</span><br><span class="line">	strs := strings.Fields(s)</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> strs &#123;</span><br><span class="line">		elem := m[v] + <span class="number">1</span></span><br><span class="line">		m[v] = elem</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wc.Test(WordCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="H:\Users\zx065\Desktop\Java\Untitled.assets\image-20230317085357965.png" alt="image-20230317085357965"></p>
<h2 id="函数的闭包"><a href="#函数的闭包" class="headerlink" title="函数的闭包"></a>函数的闭包</h2><p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。该函数可以访问并赋予其引用的变量的值，换句话说，该函数被这些变量“绑定”在一起。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		sum += x</span><br><span class="line">		<span class="keyword">return</span> sum</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	pos, neg := adder(), adder()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(</span><br><span class="line">			pos(i),</span><br><span class="line">			neg(<span class="number">-2</span>*i),</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="练习：斐波纳契闭包"><a href="#练习：斐波纳契闭包" class="headerlink" title="练习：斐波纳契闭包"></a>练习：斐波纳契闭包</h2><p>让我们用函数做些好玩的事情。</p>
<p>实现一个 <code>fibonacci</code> 函数，它返回一个函数（闭包），该闭包返回一个<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波纳契数列</a> <code>(0, 1, 1, 2, 3, 5, ...)</code>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	first := <span class="number">0</span></span><br><span class="line">	second := <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		back := first</span><br><span class="line">		first, second = second, first + second</span><br><span class="line">		<span class="keyword">return</span> back</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := fibonacci()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(f())</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法和接口"><a href="#方法和接口" class="headerlink" title="方法和接口"></a>方法和接口</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Go 没有类。不过你可以为结构体类型定义方法。</p>
<p>方法就是一类带特殊的 <strong>接收者</strong> 参数的函数。</p>
<p>方法接收者在它自己的参数列表内，位于 <code>func</code> 关键字和方法名之间。</p>
<p>在此例中，<code>Abs</code> 方法拥有一个名为 <code>v</code>，类型为 <code>Vertex</code> 的接收者。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也可以为非结构体类型声明方法。</p>
<p>在此例中，我们看到了一个带 <code>Abs</code> 方法的数值类型 <code>MyFloat</code>。</p>
<p>只能为在同一包内定义的类型的接收者声明方法，而不能为其它包内定义的类型（包括 <code>int</code> 之类的内建类型）的接收者声明方法。</p>
<p>（译注：就是接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明方法。）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := MyFloat(-math.Sqrt2)</span><br><span class="line">	fmt.Println(f.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指针接收者"><a href="#指针接收者" class="headerlink" title="指针接收者"></a>指针接收者</h2><p>你可以为指针接收者声明方法。</p>
<p>这意味着对于某类型 <code>T</code>，接收者的类型可以用 <code>*T</code> 的文法。（此外，<code>T</code> 不能是像 <code>*int</code> 这样的指针。）</p>
<p>例如，这里为 <code>*Vertex</code> 定义了 <code>Scale</code> 方法。</p>
<p>指针接收者的方法可以修改接收者指向的值（就像 <code>Scale</code> 在这做的）。由于方法经常需要修改它的接收者，指针接收者比值接收者更常用。</p>
<p>移除 <code>Scale</code> 函数声明中的 <code>*</code>，输出结果为5。</p>
<p>若使用值接收者，那么 <code>Scale</code> 方法会对原始 <code>Vertex</code> 值的副本进行操作。（对于函数的其它参数也是如此。）<code>Scale</code> 方法必须用指针接受者来更改 <code>main</code> 函数中声明的 <code>Vertex</code> 的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">	v.X = v.X * f</span><br><span class="line">	v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	v.Scale(<span class="number">10</span>)</span><br><span class="line">	fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法与指针重定向"><a href="#方法与指针重定向" class="headerlink" title="方法与指针重定向"></a>方法与指针重定向</h2><p>带指针参数的函数必须接受一个指针：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var v Vertex</span><br><span class="line">ScaleFunc(v, 5)  // 编译错误！</span><br><span class="line">ScaleFunc(&amp;v, 5) // OK</span><br></pre></td></tr></table></figure>

<p>而以指针为接收者的方法被调用时，接收者既能为值又能为指针：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var v Vertex</span><br><span class="line">v.Scale(5)  // OK</span><br><span class="line">p := &amp;v</span><br><span class="line">p.Scale(10) // OK</span><br></pre></td></tr></table></figure>

<p>对于语句 <code>v.Scale(5)</code>，即便 <code>v</code> 是个值而非指针，带指针接收者的方法也能被直接调用。 也就是说，由于 <code>Scale</code> 方法有一个指针接收者，为方便起见，Go 会将语句 <code>v.Scale(5)</code> 解释为 <code>(&amp;v).Scale(5)</code>。</p>
<p>同样的事情也发生在相反的方向。</p>
<p>接受一个值作为参数的函数必须接受一个指定类型的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var v Vertex</span><br><span class="line">fmt.Println(AbsFunc(v))  // OK</span><br><span class="line">fmt.Println(AbsFunc(&amp;v)) // 编译错误！</span><br></pre></td></tr></table></figure>

<p>而以值为接收者的方法被调用时，接收者既能为值又能为指针：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var v Vertex</span><br><span class="line">fmt.Println(v.Abs()) // OK</span><br><span class="line">p := &amp;v</span><br><span class="line">fmt.Println(p.Abs()) // OK</span><br></pre></td></tr></table></figure>

<p>这种情况下，方法调用 <code>p.Abs()</code> 会被解释为 <code>(*p).Abs()</code>。</p>
<p>使用指针接收者的原因有二：</p>
<p>首先，方法能够修改其接收者指向的值。</p>
<p>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</p>
<p>在本例中，<code>Scale</code> 和 <code>Abs</code> 接收者的类型为 <code>*Vertex</code>，即便 <code>Abs</code> 并不需要修改其接收者。</p>
<p>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>接口类型</strong> 是由一组方法签名定义的集合。</p>
<p>接口类型的变量可以保存任何实现了这些方法的值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</span><br><span class="line">	Abs() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span></span><br><span class="line"><span class="comment">// MyFloat实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// *Vertex 实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口与隐式实现"><a href="#接口与隐式实现" class="headerlink" title="接口与隐式实现"></a>接口与隐式实现</h2><p>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有“implements”关键字。</p>
<p>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</p>
<p>因此，也就无需在每一个实现上增加新的接口名称，这样同时也鼓励了明确的接口定义。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">	M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">	S <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此方法表示类型 T 实现了接口 I，但我们无需显式声明此事。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span></span> M() &#123;</span><br><span class="line">	fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i I = T&#123;<span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line">	i.M()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p><strong>类型断言</strong> 提供了访问接口值底层具体值的方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t := i.(T)</span><br></pre></td></tr></table></figure>

<p>该语句断言接口值 <code>i</code> 保存了具体类型 <code>T</code>，并将其底层类型为 <code>T</code> 的值赋予变量 <code>t</code>。</p>
<p>若 <code>i</code> 并未保存 <code>T</code> 类型的值，该语句就会触发一个恐慌。</p>
<p>为了 <strong>判断</strong> 一个接口值是否保存了一个特定的类型，类型断言可返回两个值：其底层值以及一个报告断言是否成功的布尔值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t, ok := i.(T)</span><br></pre></td></tr></table></figure>

<p>若 <code>i</code> 保存了一个 <code>T</code>，那么 <code>t</code> 将会是其底层值，而 <code>ok</code> 为 <code>true</code>。</p>
<p>否则，<code>ok</code> 将为 <code>false</code> 而 <code>t</code> 将为 <code>T</code> 类型的零值，程序并不会产生恐慌。</p>
<p>请注意这种语法和读取一个映射时的相同之处。</p>
<h2 id="Stringer"><a href="#Stringer" class="headerlink" title="Stringer"></a>Stringer</h2><p><a href="https://go-zh.org/pkg/fmt/"><code>fmt</code></a> 包中定义的 <a href="https://go-zh.org/pkg/fmt/#Stringer"><code>Stringer</code></a> 是最普遍的接口之一。类似java object中的toString()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Stringer interface &#123;</span><br><span class="line">    String() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Stringer</code> 是一个可以用字符串描述自己的类型。<code>fmt</code> 包（还有很多包）都通过此接口来打印值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">	Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%v (%v years)&quot;</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := Person&#123;<span class="string">&quot;Arthur Dent&quot;</span>, <span class="number">42</span>&#125;</span><br><span class="line">	z := Person&#123;<span class="string">&quot;Zaphod Beeblebrox&quot;</span>, <span class="number">9001</span>&#125;</span><br><span class="line">	fmt.Println(a, z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>Go 程序使用 <code>error</code> 值来表示错误状态。</p>
<p>与 <code>fmt.Stringer</code> 类似，<code>error</code> 类型是一个内建接口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type error interface &#123;</span><br><span class="line">    Error() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（与 <code>fmt.Stringer</code> 类似，<code>fmt</code> 包在打印值时也会满足 <code>error</code>。）</p>
<p>通常函数会返回一个 <code>error</code> 值，调用的它的代码应当判断这个错误是否等于 <code>nil</code> 来进行错误处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i, err := strconv.Atoi(&quot;42&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    fmt.Printf(&quot;couldn&#x27;t convert number: %v\n&quot;, err)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;Converted integer:&quot;, i)</span><br></pre></td></tr></table></figure>

<p><code>error</code> 为 nil 时表示成功；非 nil 的 <code>error</code> 表示失败。</p>
<h2 id="练习：错误"><a href="#练习：错误" class="headerlink" title="练习：错误"></a>练习：错误</h2><p>从<a href="https://tour.go-zh.org/flowcontrol/8">之前的练习</a>中复制 <code>Sqrt</code> 函数，修改它使其返回 <code>error</code> 值。</p>
<p><code>Sqrt</code> 接受到一个负数时，应当返回一个非 nil 的错误值。复数同样也不被支持。</p>
<p>创建一个新的类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type ErrNegativeSqrt float64</span><br></pre></td></tr></table></figure>

<p>并为其实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (e ErrNegativeSqrt) Error() string</span><br></pre></td></tr></table></figure>

<p>方法使其拥有 <code>error</code> 值，通过 <code>ErrNegativeSqrt(-2).Error()</code> 调用该方法应返回 <code>&quot;cannot Sqrt negative number: -2&quot;</code>。</p>
<p><strong>注意:</strong> 在 <code>Error</code> 方法内调用 <code>fmt.Sprint(e)</code> 会让程序陷入死循环。可以通过先转换 <code>e</code> 来避免这个问题：<code>fmt.Sprint(float64(e))</code>。这是为什么呢？</p>
<p>修改 <code>Sqrt</code> 函数，使其接受一个负数时，返回 <code>ErrNegativeSqrt</code> 值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;cannot Sqrt negative number: %v&quot;</span>,<span class="type">float64</span>(e))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="type">float64</span>)</span></span> (<span class="type">float64</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> x&lt;<span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x, ErrNegativeSqrt(x)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(Sqrt(<span class="number">2</span>))</span><br><span class="line">	fmt.Println(Sqrt(<span class="number">-2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><p><code>io</code> 包指定了 <code>io.Reader</code> 接口，它表示从数据流的末尾进行读取。</p>
<p>Go 标准库包含了该接口的<a href="https://go-zh.org/search?q=Read#Global">许多实现</a>，包括文件、网络连接、压缩和加密等等。</p>
<p><code>io.Reader</code> 接口有一个 <code>Read</code> 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (T) Read(b []byte) (n int, err error)</span><br></pre></td></tr></table></figure>

<p><code>Read</code> 用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个 <code>io.EOF</code> 错误。</p>
<p>示例代码创建了一个 <a href="https://go-zh.org/pkg/strings/#Reader"><code>strings.Reader</code></a> 并以每次 8 字节的速度读取它的输出。</p>
<h2 id="练习：Reader"><a href="#练习：Reader" class="headerlink" title="练习：Reader"></a>练习：Reader</h2><p>实现一个 <code>Reader</code> 类型，它产生一个 ASCII 字符 <code>&#39;A&#39;</code> 的无限流。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 给 MyReader 添加一个 Read([]byte) (int, error) 方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(reader MyReader)</span></span> Read(p []<span class="type">byte</span>) (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; <span class="built_in">len</span>(p); i++ &#123;</span><br><span class="line">		p[i] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	reader.Validate(MyReader&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="练习：图像"><a href="#练习：图像" class="headerlink" title="练习：图像"></a>练习：图像</h2><p>还记得之前编写的<a href="https://tour.go-zh.org/moretypes/18">图片生成器</a> 吗？我们再来编写另外一个，不过这次它将会返回一个 <code>image.Image</code> 的实现而非一个数据切片。</p>
<p>定义你自己的 <code>Image</code> 类型，实现<a href="https://go-zh.org/pkg/image/#Image">必要的方法</a>并调用 <code>pic.ShowImage</code>。</p>
<p><code>Bounds</code> 应当返回一个 <code>image.Rectangle</code> ，例如 <code>image.Rect(0, 0, w, h)</code>。</p>
<p><code>ColorModel</code> 应当返回 <code>color.RGBAModel</code>。</p>
<p><code>At</code> 应当返回一个颜色。上一个图片生成器的值 <code>v</code> 对应于此次的 <code>color.RGBA&#123;v, v, 255, 255&#125;</code>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Image <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(image Image)</span></span> ColorModel() color.Model &#123;</span><br><span class="line">	<span class="keyword">return</span> color.RGBAModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i Image)</span></span> Bounds() image.Rectangle &#123;</span><br><span class="line">	<span class="keyword">return</span> image.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(image Image)</span></span> At(x, y <span class="type">int</span>) color.Color &#123;</span><br><span class="line">	<span class="keyword">return</span> color.RGBA&#123;<span class="type">uint8</span>(x),<span class="type">uint8</span>(y),<span class="type">uint8</span>(<span class="number">255</span>),<span class="type">uint8</span>(<span class="number">255</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := Image&#123;&#125;</span><br><span class="line">	pic.ShowImage(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a><strong>并发</strong></h1><h2 id="Go-程"><a href="#Go-程" class="headerlink" title="Go 程"></a>Go 程</h2><p>Go 程（goroutine）是由 Go 运行时管理的轻量级线程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go f(x, y, z)</span><br></pre></td></tr></table></figure>

<p>会启动一个新的 Go 程并执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(x, y, z)</span><br></pre></td></tr></table></figure>

<p><code>f</code>, <code>x</code>, <code>y</code> 和 <code>z</code> 的求值发生在当前的 Go 程中，而 <code>f</code> 的执行发生在新的 Go 程中。</p>
<p>Go 程在相同的地址空间中运行，因此在访问共享的内存时必须进行同步。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">		fmt.Println(s)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> say(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">	say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><p>信道是带有类型的管道，你可以通过它用信道操作符 <code>&lt;-</code> 来发送或者接收值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ch &lt;- v    // 将 v 发送至信道 ch。</span><br><span class="line">v := &lt;-ch  // 从 ch 接收值并赋予 v。</span><br></pre></td></tr></table></figure>

<p>（“箭头”就是数据流的方向。）</p>
<p>和映射与切片一样，信道在使用前必须创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ch := make(chan int)</span><br></pre></td></tr></table></figure>

<p>默认情况下，发送和接收操作在另一端准备好之前都会阻塞。这使得 Go 程可以在没有显式的锁或竞态变量的情况下进行同步。</p>
<p>以下示例对切片中的数进行求和，将任务分配给两个 Go 程。一旦两个 Go 程完成了它们的计算，它就能算出最终的结果。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(s []<span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">		sum += v</span><br><span class="line">	&#125;</span><br><span class="line">	c &lt;- sum <span class="comment">// 将和送入 c</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">4</span>, <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">	<span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)/<span class="number">2</span>], c)</span><br><span class="line">	<span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)/<span class="number">2</span>:], c)</span><br><span class="line">	x, y := &lt;-c, &lt;-c <span class="comment">// 从 c 中接收</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(x, y, x+y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="range-和-close"><a href="#range-和-close" class="headerlink" title="range 和 close"></a>range 和 close</h2><p>发送者可通过 <code>close</code> 关闭一个信道来表示没有需要发送的值了。接收者可以通过为接收表达式分配第二个参数来测试信道是否被关闭：若没有值可以接收且信道已被关闭，那么在执行完</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v, ok := &lt;-ch</span><br></pre></td></tr></table></figure>

<p>之后 <code>ok</code> 会被设置为 <code>false</code>。</p>
<p>循环 <code>for i := range c</code> 会不断从信道接收值，直到它被关闭。</p>
<p><em>注意：</em> 只有发送者才能关闭信道，而接收者不能。向一个已经关闭的信道发送数据会引发程序恐慌（panic）。</p>
<p><em>还要注意：</em> 信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个 <code>range</code> 循环。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		c &lt;- x</span><br><span class="line">		x, y = y, x+y</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="练习：等价二叉查找树"><a href="#练习：等价二叉查找树" class="headerlink" title="练习：等价二叉查找树"></a>练习：等价二叉查找树</h2><p><strong>1.</strong> 实现 <code>Walk</code> 函数。</p>
<p><strong>2.</strong> 测试 <code>Walk</code> 函数。</p>
<p>函数 <code>tree.New(k)</code> 用于构造一个随机结构的已排序二叉查找树，它保存了值 <code>k</code>, <code>2k</code>, <code>3k</code>, …, <code>10k</code>。</p>
<p>创建一个新的信道 <code>ch</code> 并且对其进行步进：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go Walk(tree.New(1), ch)</span><br></pre></td></tr></table></figure>

<p>然后从信道中读取并打印 10 个值。应当是数字 <code>1, 2, 3, ..., 10</code>。</p>
<p><strong>3.</strong> 用 <code>Walk</code> 实现 <code>Same</code> 函数来检测 <code>t1</code> 和 <code>t2</code> 是否存储了相同的值。</p>
<p><strong>4.</strong> 测试 <code>Same</code> 函数。</p>
<p><code>Same(tree.New(1), tree.New(1))</code> 应当返回 <code>true</code>，而 <code>Same(tree.New(1), tree.New(2))</code> 应当返回 <code>false</code>。</p>
<p><code>Tree</code> 的文档可在<a href="https://godoc.org/golang.org/x/tour/tree#Tree">这里</a>找到。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Walk 步进 tree t 将所有的值从 tree 发送到 channel ch。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Walk</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	visit(t, ch)</span><br><span class="line">	<span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">visit</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> t==<span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	ch &lt;- t.Value</span><br><span class="line">	right := t.Right</span><br><span class="line">	visit(right, ch)</span><br><span class="line">	left := t.Left</span><br><span class="line">	visit(left, ch)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Same 检测树 t1 和 t2 是否含有相同的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Same</span><span class="params">(t1, t2 *tree.Tree)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">	ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">go</span> Walk(t1, ch1)</span><br><span class="line">	<span class="keyword">go</span> Walk(t2, ch2)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 异或两次同一个值之后会为原值</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="keyword">range</span> ch1 &#123;</span><br><span class="line">		fmt.Println(j)</span><br><span class="line">		i ^= j</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="keyword">range</span> ch2 &#123;</span><br><span class="line">		fmt.Println(j)</span><br><span class="line">		i ^= j</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(Same(tree.New(<span class="number">1</span>), tree.New(<span class="number">1</span>)))</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="练习：Web-爬虫"><a href="#练习：Web-爬虫" class="headerlink" title="练习：Web 爬虫"></a>练习：Web 爬虫</h2><p>在这个练习中，我们将会使用 Go 的并发特性来并行化一个 Web 爬虫。</p>
<p>修改 <code>Crawl</code> 函数来并行地抓取 URL，并且保证不重复。</p>
<p><em>提示</em>：你可以用一个 map 来缓存已经获取的 URL，但是要注意 map 本身并不是并发安全的！</p>
<p><code>sync.WaitGroup</code> 是 Go 语言标准库中的一个并发原语，它可以用于协调和同步多个 Goroutine 的执行，以确保在所有 Goroutine 执行完毕之后，程序才能继续往下执行。</p>
<p>在使用 <code>sync.WaitGroup</code> 时，首先需要通过 <code>Add</code> 方法设置要等待的 Goroutine 的数量，然后在每个 Goroutine 执行完毕之后，都需要调用 <code>Done</code> 方法，以通知 <code>WaitGroup</code> 该 Goroutine 已经执行完毕。最后，通过调用 <code>Wait</code> 方法等待所有 Goroutine 执行完毕，程序才会继续往下执行。</p>
<p>具体来说，可以通过以下的步骤来使用 <code>sync.WaitGroup</code>：</p>
<ol>
<li>创建一个 <code>sync.WaitGroup</code> 对象。</li>
<li>在要执行的 Goroutine 前调用 <code>Add</code> 方法，将要执行的 Goroutine 的数量加 1。</li>
<li>在每个 Goroutine 执行完毕后调用 <code>Done</code> 方法，将要执行的 Goroutine 的数量减 1。</li>
<li>在主 Goroutine 中调用 <code>Wait</code> 方法，等待所有 Goroutine 执行完毕。</li>
</ol>
<p>示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goCopy codepackage main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;sync&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func worker(id int, wg *sync.WaitGroup) &#123;</span><br><span class="line">    defer wg.Done()</span><br><span class="line"></span><br><span class="line">    fmt.Printf(&quot;Worker %d starting\n&quot;, id)</span><br><span class="line"></span><br><span class="line">    // 模拟一些工作</span><br><span class="line">    for i := 0; i &lt; 1000000000; i++ &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(&quot;Worker %d done\n&quot;, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    // 创建 3 个 Goroutine</span><br><span class="line">    for i := 1; i &lt;= 3; i++ &#123;</span><br><span class="line">        wg.Add(1)</span><br><span class="line">        go worker(i, &amp;wg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 等待所有 Goroutine 执行完毕</span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    fmt.Println(&quot;All workers done&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的示例代码中，我们创建了 3 个 Goroutine，并且使用 <code>Add</code> 方法将要执行的 Goroutine 的数量加 1。在每个 Goroutine 执行完毕后，我们使用 <code>Done</code> 方法将要执行的 Goroutine 的数量减 1。最后，我们在主 Goroutine 中使用 <code>Wait</code> 方法等待所有 Goroutine 执行完毕。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Fetcher <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Fetch 返回 URL 的 body 内容，并且将在这个页面上找到的 URL 放到一个 slice 中。</span></span><br><span class="line">	Fetch(url <span class="type">string</span>) (body <span class="type">string</span>, urls []<span class="type">string</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> urlRecord <span class="keyword">struct</span> &#123;</span><br><span class="line">	v   <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	mux sync.Mutex</span><br><span class="line">	wg  sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = urlRecord&#123;v: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Crawl 使用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="type">string</span>, depth <span class="type">int</span>, fetcher Fetcher)</span></span> &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 并行的抓取 URL。</span></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 不重复抓取页面。</span></span><br><span class="line">	<span class="comment">// 下面并没有实现上面两种情况：</span></span><br><span class="line">	<span class="keyword">defer</span> m.wg.Done()</span><br><span class="line">	<span class="keyword">if</span> depth &lt;= <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	m.mux.Lock()</span><br><span class="line">	m.v[url]++</span><br><span class="line">	m.mux.Unlock()</span><br><span class="line"></span><br><span class="line">	body, urls, err := fetcher.Fetch(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;found: %s %q\n&quot;</span>, url, body)</span><br><span class="line">	<span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</span><br><span class="line">		m.mux.Lock()</span><br><span class="line">		<span class="keyword">if</span> _, ok := m.v[u]; !ok &#123;</span><br><span class="line">			m.wg.Add(<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">go</span> Crawl(u, depth<span class="number">-1</span>, fetcher)</span><br><span class="line">		&#125;</span><br><span class="line">		m.mux.Unlock()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	</span><br><span class="line">	m.wg.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> Crawl(<span class="string">&quot;https://golang.org/&quot;</span>, <span class="number">4</span>, fetcher)</span><br><span class="line">	m.wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fakeFetcher 是返回若干结果的 Fetcher。</span></span><br><span class="line"><span class="keyword">type</span> fakeFetcher <span class="keyword">map</span>[<span class="type">string</span>]*fakeResult</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fakeResult <span class="keyword">struct</span> &#123;</span><br><span class="line">	body <span class="type">string</span></span><br><span class="line">	urls []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f fakeFetcher)</span></span> Fetch(url <span class="type">string</span>) (<span class="type">string</span>, []<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> res, ok := f[url]; ok &#123;</span><br><span class="line">		<span class="keyword">return</span> res.body, res.urls, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;not found: %s&quot;</span>, url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetcher 是填充后的 fakeFetcher。</span></span><br><span class="line"><span class="keyword">var</span> fetcher = fakeFetcher&#123;</span><br><span class="line">	<span class="string">&quot;https://golang.org/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;The Go Programming Language&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Packages&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/fmt/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/os/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/fmt/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Package fmt&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/os/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Package os&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Map 赋值的方式</title>
    <url>/2023/04/17/Java/Java%20Map%20%E5%88%9D%E5%A7%8B%E5%8C%96%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<h1 id="方法一：直接赋值"><a href="#方法一：直接赋值" class="headerlink" title="方法一：直接赋值"></a>方法一：直接赋值</h1><p>一般我们初始化并赋初值是这样做的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;Locy&quot;</span>);  </span><br><span class="line">map.put(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;John&quot;</span>);</span><br></pre></td></tr></table></figure>


<h1 id="方法二：双括号初始化（Java8）"><a href="#方法二：双括号初始化（Java8）" class="headerlink" title="方法二：双括号初始化（Java8）"></a>方法二：双括号初始化（Java8）</h1><p>在一个表达式中完成初始化并赋初值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        put(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;Locy&quot;</span>); </span><br><span class="line">        put(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;John&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里用了双括号来初始化。第一层括弧实际是定义了一个匿名内部类 ，第二层括弧实际上是一个实例初始化块 ，这个块在内部匿名类构造时被执行。但是这种写法可能导致这个对象串行化失败的问题。</p>
<p>这种使用双括号进行初始化的语法在执行效率上要比普通的初始化写法要稍低。</p>
<p>List 等也都可以使用这种方法</p>
<h1 id="方式三：guava"><a href="#方式三：guava" class="headerlink" title="方式三：guava"></a>方式三：guava</h1><p>谷歌推出的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; myMapB = ImmutableMap.&lt;String, String&gt;builder()</span><br><span class="line">            .put(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;Locy&quot;</span>); </span><br><span class="line">        	.put(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;John&quot;</span>);</span><br><span class="line">            .build();</span><br></pre></td></tr></table></figure>

<p>注意 ImmutableMap 初始化之后不能再进行put，会抛出异常</p>
<p>查看 ImmutableMap 源码可以发现，调用put方法时，直接抛异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="meta">@CanIgnoreReturnValue</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">put</span><span class="params">(K k, V v)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="方式四：Java-9或更高版本"><a href="#方式四：Java-9或更高版本" class="headerlink" title="方式四：Java 9或更高版本"></a>方式四：Java 9或更高版本</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最多存储10个元素</span></span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; test1 = Map.of(</span><br><span class="line">    <span class="string">&quot;name1&quot;</span>, <span class="string">&quot;Locy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name2&quot;</span>, <span class="string">&quot;John&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有限制</span></span><br><span class="line">Map&lt;String, String&gt; test2 = Map.ofEntries(</span><br><span class="line">    entry(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;Locy&quot;</span>),</span><br><span class="line">    entry(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;John&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2023/03/26/Java/Java/</url>
    <content><![CDATA[<h2 id="Java-特点"><a href="#Java-特点" class="headerlink" title="Java 特点"></a><strong>Java 特点</strong></h2><p>java语言特性</p>
<ul>
<li>面对对象：将重点放在数据和对象的接口上</li>
<li>简单性：相比c++，减少了头文件、指针等很多概念，而且java可以在很小的机器上独立运行</li>
<li>Java语言是健壮的 : 强类型机制, 异常处理, 垃圾的自动收集</li>
<li>跨平台性：java文件被编译成字节码文件，然后在不同的机器上可以通过JVM编译成机器码执行</li>
<li>解释性语言：需要解释器来执行</li>
<li>分布式：有丰富的例程库用于处理TCP&#x2F;IP协议，可以通过URL访问网络上的对象</li>
</ul>
<span id="more"></span>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h2 id="IDEA-开发工具"><a href="#IDEA-开发工具" class="headerlink" title="IDEA 开发工具"></a>IDEA 开发工具</h2><ul>
<li>新建项目</li>
<li>运行调试</li>
<li>界面配置</li>
<li>插件管理</li>
</ul>
<h2 id="Java-基础语法"><a href="#Java-基础语法" class="headerlink" title="Java 基础语法"></a>Java 基础语法</h2><h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><ul>
<li><p>1字节8个bit</p>
</li>
<li><p>byte 1字节</p>
</li>
<li><p>short 2字节</p>
<p>byte short 运算时会转换到int类型</p>
</li>
<li><p>int 4字节</p>
</li>
<li><p>long 8字节</p>
</li>
<li><p>float 4字节</p>
</li>
<li><p>double 8字节<br>浮点数 &#x3D; 符号位+指数位+尾数位<br>尾数位可能丢失造成精度丢失</p>
<p>浮点数的比较应该是两个数的差值的绝对值，在某个精度范围内判断（Math.abs(num1 - num2)&lt;）</p>
</li>
<li><p>boolean 1字节</p>
</li>
<li><p>char 2字节</p>
</li>
</ul>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul>
<li>for</li>
<li>if</li>
<li>else if</li>
<li>while</li>
<li>dowhile</li>
<li>swich</li>
</ul>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>final: final修饰的类不能被继承，修饰的方法不能重写，修饰的变量是基本数据类型不能改变，修饰的变量是引用类型不能指向其他的对象</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a><em>面向对象</em></h2><p>使用原有的技术方法（单独定义和使用数组解决存储）不利于数据的管理，效率低下，代码的可重用性和可维护性差，重复性高，程序的可读性、可扩展性差。</p>
<p>面对对象是一种编程思想。相比于传统的方法，解决了上面的问题，提供了类、对象、封装继承和多态的概念，面对对象更加的灵活，可以更好的满足复杂的业务需求。</p>
<p>类是自定义的数据类型，是一种抽象的概念，描述了一类对象的共同特征</p>
<p>对象是具体的实例，是类的具体表现</p>
<h3 id="面对对象的三大特征"><a href="#面对对象的三大特征" class="headerlink" title="面对对象的三大特征"></a>面对对象的三大特征</h3><ul>
<li><p>封装：把数据和操作数据的方法装在一起，外部不能直接调用访问内部数据</p>
</li>
<li><p>继承：一个类从另一个类中继承属性和方法，减少代码重复</p>
</li>
<li><p>多态：一个类可以拥有多种形态，根据不同的情况执行不同的操作</p>
<p>多态和继承的区别在于：继承是一种静态的关系，在编译时就可以确定，多态是动态的关系，在运行时才知道需要执行怎样的操作</p>
</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>是类的行为</p>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>对象可以调用类的实例方法，但是不推荐这样做，这种方式会造成混淆，静态方法计算的结果跟对象没有关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">employee</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">getNextId</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">harry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    harry.getNextId();</span><br><span class="line">    Employee.getNextId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><h4 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h4><p>在java中方法参数传递的方式是值传递</p>
<p>在方法中对传入的值进行处理的时候不会影响到原值</p>
<p>但在对象的处理中，拷贝的对象引用的仍然是原有的地址，所以对对象中的属性操作时不会出现问题</p>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>一个类中多个同名但是参数列表不同的方法</p>
<h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>子类重新定义父类中的方法，实现不同的功能</p>
<h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a><strong>对象的内存布局</strong></h3><p><img src="/%5CJava.assets%5Cimage-20230212191224066.png" alt="image-20230212191224066"></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>super与this不同，super不是对象的引用，不能将super赋给另外一个对象变量，只是一个指示编译器去调用父类方法的特殊关键字。</p>
<h4 id="子类构造器"><a href="#子类构造器" class="headerlink" title="子类构造器"></a>子类构造器</h4><p>用 super 实现对父类构造器的调用，使用 super 调用构造器的语句必须是子类构造器的第一条</p>
<p>如果子类的构造器没有显式的调用父类的构造器，自动调用父类没有参数的构造器，如果父类没有无参构造器，则会编译错误 </p>
<p>一个对象被指示为多种类型的情况被称为<em>多态</em>，运行时自动选择调用方法的现象叫做<em>动态绑定</em></p>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>父类对象的任何地方都可以用子类对象置换，对象变量是多态的</p>
<p><strong>注意：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Manager[] managers = <span class="keyword">new</span> <span class="title class_">Manager</span>[<span class="number">3</span>];</span><br><span class="line">managers[<span class="number">0</span>] = boss;</span><br><span class="line"><span class="comment">// 父类对象引用子类对象</span></span><br><span class="line">Employee[] employees = managers; </span><br><span class="line"><span class="comment">// 虽然是父类，但是数组的类型是子类，父类替换其中的元素会报错</span></span><br><span class="line">employees[<span class="number">0</span>] = employee; <span class="comment">// java.lang.ArrayStoreException: object.Employee</span></span><br><span class="line">System.out.println(managers[<span class="number">0</span>].getName()); </span><br></pre></td></tr></table></figure>

<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul>
<li>只能在继承层次内进行类型转换</li>
<li>将父类转换为子类之前，应该使用instanceof检查</li>
</ul>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>是指只定义属性和行为的抽象概念，但是不实现</p>
<p>包含一个或多个抽象方法的类必须声明为抽象的，抽象类中也可以含有具体的方法</p>
<p>抽象类不能被实现，但是可以引用子类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br></pre></td></tr></table></figure>

<h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><table>
<thead>
<tr>
<th>private</th>
<th>仅对本类可见</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>所有都可见</td>
</tr>
<tr>
<td>protected</td>
<td>对本包和所有子类可见</td>
</tr>
<tr>
<td>（不填）</td>
<td>对本包可见</td>
</tr>
</tbody></table>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>equals的最好的流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object otherObject)</span> &#123;</span><br><span class="line">    <span class="comment">// 检测 this 与 otherObject 是否引用同一个对象</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span> == otherObject) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 检测 otherObject 是否为 null</span></span><br><span class="line">    <span class="keyword">if</span>(otherObject == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 比较 this 与 otherObject 是否属于同一个类。</span></span><br><span class="line">    <span class="comment">// 如果 equals 的语义在每个子类中有所改变，就使用 getClass 检测</span></span><br><span class="line">    <span class="comment">// 如果所有的子类都拥有统一的语义，就使用 instanceof 检测</span></span><br><span class="line">    <span class="keyword">if</span>(getClass() != otherObject.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 将 otherObject 转换为相应的类类型变量</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">other</span> <span class="operator">=</span> (Employee) otherObject;</span><br><span class="line">    <span class="comment">// 现在开始对所有需要比较的域进行比较。</span></span><br><span class="line">    <span class="keyword">return</span> Objects.equals(name, other.name)</span><br><span class="line">            &amp;&amp; salary == other.salary</span><br><span class="line">            &amp;&amp; id == other.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h4><p>重新定义equals方法，就必须重新定义hashcode方法，在插入hash表时会计算插入对象的hash值决定插入的位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(name, salary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承的设计技巧"><a href="#继承的设计技巧" class="headerlink" title="继承的设计技巧"></a>继承的设计技巧</h3><ol>
<li>将公共操作和域放在父类</li>
<li>不要使用受保护的域</li>
<li>使用继承实现is-a关系</li>
<li>除非所有继承的方法都有意义，否则不要使用继承</li>
<li>覆盖方法时不要改变预期的行为</li>
<li>使用多态，而不是用类型信息</li>
<li>不要过多的使用反射</li>
</ol>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>指一组定义的方法，可以被其他类实现</p>
<p><strong>抽象类和接口的区别</strong>：抽象类可以包含抽象方法和非抽象方法，接口只能包含抽象方法，抽象类可以定义实例变量，接口不能</p>
<p>每个类只可以扩展于一个类，但是可以实现多个接口</p>
<h3 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h3><p>多态参数：作为参数传入方法，方法参数中可以使用实现了接口的类的对象实例</p>
<p>多态数组：接口数组中可以存放不同的实现了接口的类的对象实例</p>
<p>多态传递：接口B继承了其他的接口A时，实现了接口B的类也要实现接口A的方法</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>外部类</p>
<p>内部类</p>
<ul>
<li><p>定义在外部类的局部位置上（方法内）</p>
<ol>
<li><p>局部内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">// 外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m2 调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 局部内部类写在方法或者代码块中</span></span><br><span class="line">        <span class="comment">// 本质是一个局部变量 不能有访问修饰符 可以用final修饰</span></span><br><span class="line">        <span class="comment">// 作用域只在定义的方法或者代码块中</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span> <span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 可以调用外部类的私有变量和私有方法</span></span><br><span class="line">                <span class="comment">// 如果存在重名，采取就近原则，调用外部类时采用类名.this.变量名调用</span></span><br><span class="line">                System.out.println(<span class="string">&quot;n1 = &quot;</span> + n1 + <span class="string">&quot;Outer.this.n1 = &quot;</span> + Outer.<span class="built_in">this</span>.n1);</span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 外部类 访问局部内部类的成员 只能在作用域内访问</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n11</span> <span class="operator">=</span> inner.n1;</span><br><span class="line">        inner.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>匿名内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">// 匿名内部类</span></span><br><span class="line">    <span class="comment">// 编译类型是IA</span></span><br><span class="line">    <span class="comment">// 运行类型是 外部类类名$数字 LocalInnerClass$1</span></span><br><span class="line">    <span class="comment">// 只进行一次用于实例化对象 在实现类使用次数少的情况下 简化实现类的编写</span></span><br><span class="line">    <span class="type">IA</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IA</span> ()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;tiger crying...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>定义在成员位置</p>
<ol>
<li>成员内部类</li>
<li>静态内部类</li>
</ol>
</li>
</ul>
<p>其他类</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Size</span> &#123;</span><br><span class="line">    SMALL(<span class="string">&quot;S&quot;</span>), MEDIUM(<span class="string">&quot;M&quot;</span>), LARGE(<span class="string">&quot;L&quot;</span>), EXTRA_LARGE(<span class="string">&quot;XL&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Size(String abbreviation) &#123;</span><br><span class="line">        <span class="built_in">this</span>.abbreviation = abbreviation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String abbreviation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAbbreviation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> abbreviation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较两个枚举类型的值的时候直接用 &#x3D;&#x3D; 就可以了</p>
<h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String 不可变，可以更改变量的原因是重新指向了新的对象，线程不安全</p>
<p>StringBuffer 继承 AbstractStringBuilder，可变字符串，对方法加了同步锁线程安全</p>
<p>StringBuilder 可变字符串，线程不安全，性能比StringBuffer提升10%-15%</p>
<blockquote>
<p>Java9之后String AbstractStringBuilder 的实现改用byte数组存储字符串</p>
</blockquote>
<h4 id="String-不可变"><a href="#String-不可变" class="headerlink" title="String 不可变"></a>String 不可变</h4><p>用final关键字修饰字符数组，保存字符串的数组是私有的，String没有暴露修改这个字符数组的方法 （final修饰字符数组只是无法修改引用其他的对象，对于数组内部地址中存储的字符仍然可以修改）</p>
<h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><p>Data</p>
<p>Calendar</p>
<p>TimeStamp</p>
<h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a><strong>集合类</strong></h2><p>集合主要分了两组：单列集合、双列集合</p>
<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ul>
<li><p>List</p>
<p>ArrayList 线程安全 初始化10个 每次扩容1.5倍</p>
<p>Vector 线程安全 初始化 每次扩容2倍</p>
<p>LinkedArrayList 底层是双向链表实现，插入删除方便</p>
</li>
<li><p>Set</p>
<p>HashSet 底层实现HashMap 无序</p>
<p>TreeSet 底层实现TreeMap</p>
</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>HashMap 1.7之前底层数据结构是数组加链表，1.8之后是数组加链表加红黑树，当单条链表元素超过8并且数组长度大于64之后会将链表转为红黑树。每次扩容两倍，添加时先通过扰动函数<code>hash()</code>计算 hash 值，然后计算 <code>(len-1) ^ hash</code> 得到 插入的位置。</li>
<li>Hashtable </li>
<li>TreeMap 1.7</li>
<li>Properties 配置文件键值对</li>
<li>LinkedHashMap 输出有序 可以传入一个比较器，用来决定添加进元素的顺序并决定元素是否添加</li>
</ul>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><strong>多线程</strong></h2><h3 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h3><p>进程是一个容器，有多个线程</p>
<p>实现多线程可以通过</p>
<ul>
<li>继承Thread， 实现类调用start()方法</li>
<li>实现Runable(Thread也是实现Runable)</li>
<li>实现Callable</li>
</ul>
<p>区别：Thread 是继承，Runable是接口，实现了Runable也要通过new Thread静态代理。一个实现了Runable接口的类实例可以传入不同的Thread启动，Callable有返回值。</p>
<h3 id="线程七大状态"><a href="#线程七大状态" class="headerlink" title="线程七大状态"></a>线程七大状态</h3><p>新建–&gt; （就绪 –&gt; 运行）Runnable –&gt; 死亡</p>
<p>阻塞</p>
<p>定时等待</p>
<p>等待</p>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>两个线程互相持有对方接下来需要的资源无法放弃自身拥有的资源而造成的阻塞情况。</p>
<h2 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h2><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><ul>
<li>按操作数据单位：字节流（8bit）二进制文件（音频，视频等，不会出现文件的损失），字符流（字符）文本文件</li>
<li>流向：输入流，输出流</li>
<li>角色：节点流、处理流&#x2F;包装流</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th><strong>字节流</strong></th>
<th><strong>字符流</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>输入流</strong></td>
<td>InputStream</td>
<td>Reader</td>
</tr>
<tr>
<td><strong>输出流</strong></td>
<td>OutputStream</td>
<td>Writer</td>
</tr>
</tbody></table>
<h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p>FileInputStream</p>
<p>BufferedInputStream</p>
<p>ObjectInputStream </p>
<h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p>FileOutputStream</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射可以用来在运行时动态操作Java代码，分析类能力</p>
<p>反射的作用：</p>
<ul>
<li>运行时分析类的能力</li>
<li>运行时查看对象</li>
<li>实现通用的数组操作代码</li>
<li>利用method对象，运行时调用方法</li>
</ul>
<h3 id="运行时利用反射分析对象"><a href="#运行时利用反射分析对象" class="headerlink" title="运行时利用反射分析对象"></a>运行时利用反射分析对象</h3><p>获取对象域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">harry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Harry Hacker&quot;</span>, <span class="number">21</span>, <span class="number">35000</span>);</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Employee</span>&gt; cl = harry.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> cl.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// name是私有</span></span><br><span class="line">name.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> name.get(harry);</span><br></pre></td></tr></table></figure>

<h3 id="数组复制"><a href="#数组复制" class="headerlink" title="数组复制"></a>数组复制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">goodCopyOf</span><span class="params">(Object a, <span class="type">int</span> newLength)</span> &#123;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> a.getClass();</span><br><span class="line">     <span class="keyword">if</span> (!cl.isArray()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="type">Class</span> <span class="variable">componentType</span> <span class="operator">=</span> cl.getComponentType();</span><br><span class="line">     <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> Array.getLength(a);</span><br><span class="line">     <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(componentType, length);</span><br><span class="line">     System.arraycopy(a, <span class="number">0</span>, o, <span class="number">0</span>, Math.min(length, newLength));</span><br><span class="line">     <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用Method"><a href="#使用Method" class="headerlink" title="使用Method"></a>使用Method</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> Employee.class.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="反射实例"><a href="#反射实例" class="headerlink" title="反射实例"></a>反射实例</h3><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>文档 ：Spring IOC </p>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><h4 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h4>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射</title>
    <url>/2023/04/19/Java/Java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p>Java 语言中的类、方法、变量、参数和包等都可以被注解修饰。</p>
<h1 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h1><p>注解是一个接口 有三个主要部分</p>
<ol>
<li><p>Annotation</p>
<p>每 1 个 Annotation 对象，都会有唯一的 RetentionPolicy 属性；至于 ElementType 属性，则有 1~n 个。</p>
</li>
<li><p><strong>ElementType 是 Enum 枚举类型，它用来指定 Annotation 的类型。</strong></p>
</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span> &#123;</span><br><span class="line">    TYPE,               <span class="comment">/* 类、接口（包括注释类型）或枚举声明  */</span></span><br><span class="line">    FIELD,              <span class="comment">/* 字段声明（包括枚举常量）  */</span></span><br><span class="line">    METHOD,             <span class="comment">/* 方法声明  */</span></span><br><span class="line">    PARAMETER,          <span class="comment">/* 参数声明  */</span></span><br><span class="line">    CONSTRUCTOR,        <span class="comment">/* 构造方法声明  */</span></span><br><span class="line">    LOCAL_VARIABLE,     <span class="comment">/* 局部变量声明  */</span></span><br><span class="line">    ANNOTATION_TYPE,    <span class="comment">/* 注释类型声明  */</span></span><br><span class="line">    PACKAGE             <span class="comment">/* 包声明  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   指定一个 Annotation 对象使用在什么类型上</p>
<ol start="3">
<li><p>RetentionPolicy</p>
<p>用来指定 Annotation 的作用域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span> &#123;</span><br><span class="line">    SOURCE,            <span class="comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */</span></span><br><span class="line"></span><br><span class="line">    CLASS,             <span class="comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为  */</span></span><br><span class="line"></span><br><span class="line">    RUNTIME            <span class="comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Annotation-通用定义"><a href="#Annotation-通用定义" class="headerlink" title="Annotation 通用定义"></a>Annotation 通用定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation1 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@interface</strong></p>
<p>使用 @interface 定义类时，意味着这个类实现了 java.lang.annotation.Annotation 接口，表示这个类是一个Annotation。定义 Annotation 时，@interface 是必须的。注解不能继承其他的注解或接口。</p>
<p><strong>@Retention</strong> </p>
<p>指定 Annotation 的策略属性，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问，其中属性就是 RetentionPolicy 的类型。</p>
<p><strong>@Documented</strong></p>
<p>标记这些注解是否可以出现在 javadoc 中。</p>
<p><strong>@Target</strong></p>
<p>指定 Annotation 的类型属性，类型是 ElementType 。</p>
<p>@Inherited - 标记这个注解是继承于哪个注解类(默认注解并没有继承于任何子类)</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型</title>
    <url>/2023/04/19/Java/Java%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring编程思想</title>
    <url>/2023/03/26/Java/Spring/</url>
    <content><![CDATA[<h1 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>IOC （inversion of control）控制反转，是一种编程思想，对面对对象的补充，通过将对象的创建，组装，管理反转在框架中进行，实现低耦合和可重用性</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>创建工厂</p>
<p>读取配置文件</p>
<p>通过配置文件创建实例</p>
<span id="more"></span>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>三层架构 Dao - Service - Controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">HelloDao</span> <span class="variable">helloDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloDaoImpl</span>();</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helloDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;spring&quot;</span>  + helloService.findAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>当需求发生改变时，代码需要更改，要重写接口代码</p>
<p><strong>解决：</strong> 使用静态工厂创建特定的类，不用在Service中写死代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HelloDao <span class="title function_">getDao</span><span class="params">()</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">HelloDao</span> <span class="variable">helloDao</span> <span class="operator">=</span> BeanFactory.getDao();</span><br></pre></td></tr></table></figure>

<p><strong>问题：</strong>需求发生改变时 仍然需要修改代码</p>
<p>解决：使用反射从配置文件中获取具体的类</p>
<ol>
<li><p>定义配置文件</p>
</li>
<li><p>程序中读取配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用工厂创建特定的类，不用写死在Service中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * version1  public static HelloDao getDao()&#123;</span></span><br><span class="line"><span class="comment">     *         return new HelloDaoImpl();</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">helloDao</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;helloDao&quot;</span>);</span><br><span class="line">        <span class="comment">// 利用反射创建对象</span></span><br><span class="line">        <span class="comment">// 通过更改配置文件就可以解决代码不能切换的问题</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(helloDao);</span><br><span class="line">            <span class="keyword">return</span> aClass.getConstructor( <span class="literal">null</span>).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | InvocationTargetException | InstantiationException | IllegalAccessException |</span><br><span class="line">                 NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取配置文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        properties = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;application.properties&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取</p>
<p>之后使用外部配置修改解决代码切换的问题</p>
</li>
</ol>
</li>
</ol>
<p><strong>创建的对象不是单例</strong></p>
<p>重复使用对象会出现使用很多个实例的问题</p>
<p>解决：使用 Map 存放创建的对象，同时加锁保证线程安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getDao</span><span class="params">(String beanName)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!cache.containsKey(beanName))&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (BeanFactory.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!cache.containsKey(beanName))&#123;</span><br><span class="line">                    <span class="comment">// 利用反射创建对象</span></span><br><span class="line">                    <span class="comment">// 通过更改配置文件就可以解决代码不能切换的问题</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">helloDao</span> <span class="operator">=</span> properties.getProperty(beanName);</span><br><span class="line">                        Class&lt;?&gt; aClass = Class.forName(helloDao);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.getConstructor(<span class="literal">null</span>).newInstance();</span><br><span class="line">                        cache.put(beanName, o);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ClassNotFoundException | InvocationTargetException | InstantiationException | IllegalAccessException |</span><br><span class="line">                             NoSuchMethodException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache.get(beanName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>放弃创造对象的权限，将权限交给 BeanFactory</p>
<p>这种由别人或者对象控制的思想就是 <strong>IOC 控制反转</strong></p>
<h1 id="基于注解的-IOC"><a href="#基于注解的-IOC" class="headerlink" title="基于注解的 IOC"></a>基于注解的 IOC</h1><p>通过配置文件获取还是很麻烦，根据注解创建 Bean 实例，通过注解获取到 Bean 实例更为方便</p>
<h2 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h2><ol>
<li><p>扫描包</p>
</li>
<li><p>获取包下添加了注解的类，获取其中的组件 Class 和 BeanName 封装成 BeanDefination 存入集合，这个集合就是 IOC 自动装载的原材料</p>
</li>
<li><p>通过反射机制创建对象，将动态创建的对象以 Map 的形式存入缓存</p>
</li>
<li><p>通过 BeanName 取出对应的 Bean, 使用反射执行方法</p>
</li>
</ol>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotationConfigApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Object&gt; ioc =  <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pack</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyAnnotationConfigApplicationContext</span><span class="params">(String pack)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 扫描包</span></span><br><span class="line">        <span class="comment">//2. 获取包下添加了注解的类，获取其中的组件 Class 和 BeanName 封装成 BeanDefination 存入集合，这个集合就是 IOC 自动装载的原材料</span></span><br><span class="line">        Set&lt;BeanDefinition&gt; beanDefinition = findBeanDefinition(pack);</span><br><span class="line">        <span class="comment">//3. 通过反射机制创建对象，将动态创建的对象以 Map 的形式存入缓存</span></span><br><span class="line">        createObject(beanDefinition);</span><br><span class="line">        <span class="comment">// 自动装载</span></span><br><span class="line">		autowireObject(beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autowireObject</span><span class="params">(Set&lt;BeanDefinition&gt; beanDefinitions)</span> &#123;</span><br><span class="line">        <span class="comment">//获取注入的集合</span></span><br><span class="line">        Iterator&lt;BeanDefinition&gt; iterator = beanDefinitions.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="comment">//拿到bean 信息</span></span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="comment">//获取当前需要自动装配的对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> beanDefinition.getBeanClass();</span><br><span class="line">            <span class="comment">//拿到全部属性</span></span><br><span class="line">            Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">                <span class="type">Autowired</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Autowired.class);</span><br><span class="line">                <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">Qualifer</span> <span class="variable">qualifer</span> <span class="operator">=</span> field.getAnnotation(Qualifer.class);</span><br><span class="line">                    <span class="keyword">if</span> (qualifer != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 根据字段的名字获取</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> qualifer.value();</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getBean(beanName);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> field.getName();</span><br><span class="line">                            <span class="type">String</span> <span class="variable">mothedName</span> <span class="operator">=</span> <span class="string">&quot;set&quot;</span> + fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">                            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(mothedName, field.getType());</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> getBean(beanDefinition.getBeanName());</span><br><span class="line">                            System.out.println(bean);</span><br><span class="line">                            method.invoke(object, bean);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//byType</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createObject</span><span class="params">(Set&lt;BeanDefinition&gt; beanDefinitions)</span> &#123;</span><br><span class="line">        Iterator&lt;BeanDefinition&gt; iterator = beanDefinitions.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="type">Class</span> <span class="variable">beanClass</span> <span class="operator">=</span> beanDefinition.getBeanClass();</span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> beanDefinition.getBeanName();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> beanClass.getConstructor().newInstance();</span><br><span class="line">                <span class="comment">// 属性字段 设置值</span></span><br><span class="line">                Field[] declaredFields = beanClass.getDeclaredFields();</span><br><span class="line">                <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">                    <span class="type">Value</span> <span class="variable">valueAnnotation</span> <span class="operator">=</span> declaredField.getAnnotation(Value.class);</span><br><span class="line">                    <span class="keyword">if</span> (valueAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> valueAnnotation.value();</span><br><span class="line">                        <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> declaredField.getName();</span><br><span class="line">                        <span class="comment">// set方法</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;set&quot;</span> + fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">                        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> beanClass.getMethod(methodName, declaredField.getType());</span><br><span class="line">                        <span class="comment">//数据类型转换</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">//可能会有很多类型 篇幅过长</span></span><br><span class="line">                        <span class="keyword">switch</span> (declaredField.getType().getName()) &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&quot;java.lang.Integer&quot;</span>:</span><br><span class="line">                                val = Integer.parseInt(value);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&quot;java.lang.String&quot;</span>:</span><br><span class="line">                                val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&quot;java.lang.Float&quot;</span>:</span><br><span class="line">                                val = Float.parseFloat(value);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 执行</span></span><br><span class="line">                        method.invoke(o, val);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ioc.put(beanName, o);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException |</span><br><span class="line">                     NoSuchMethodException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描包中符合条件的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pack</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;BeanDefinition&gt; <span class="title function_">findBeanDefinition</span><span class="params">(String pack)</span>&#123;</span><br><span class="line">        <span class="comment">// 1. 获取包下所有类</span></span><br><span class="line">        HashSet&lt;BeanDefinition&gt; beanDefinitions = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Class&gt; classes = getClasses(pack);</span><br><span class="line">        Iterator&lt;Class&gt; iterator = classes.iterator();</span><br><span class="line">        <span class="comment">// 2. 遍历类，找到添加了注解的类</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="type">Component</span> <span class="variable">annotation</span> <span class="operator">=</span> (Component) clazz.getAnnotation(Component.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="comment">// 获取Component的值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                    <span class="comment">// 获取类名</span></span><br><span class="line">                    beanName = clazz.getSimpleName();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(clazz, beanName);</span><br><span class="line">                beanDefinitions.add(beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 将这些类封装成BeanDefinition装载到集合中</span></span><br><span class="line">        <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get classes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pack</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&gt; <span class="title function_">getClasses</span><span class="params">(String pack)</span>&#123;</span><br><span class="line">        Set&lt;Class&gt; classes = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// get package name and replace to url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> pack;</span><br><span class="line">        <span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> packageName.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        Enumeration&lt;URL&gt; dirs;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line">            <span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line">                <span class="comment">// get next element</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line">                <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> url.getProtocol();</span><br><span class="line">                <span class="comment">// if it is saved at server like a file</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;file&quot;</span>.equals(protocol)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">decode</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    findClassesInPackageByFile(packageName, decode, <span class="literal">true</span>, classes);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;jar&quot;</span>.equals(protocol)) &#123;</span><br><span class="line">                    <span class="comment">// 如果是jar包文件</span></span><br><span class="line">                    <span class="comment">// 定义一个JarFile</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;jar类型的扫描&quot;</span>);</span><br><span class="line">                    JarFile jar;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取jar</span></span><br><span class="line">                        jar = ((JarURLConnection) url.openConnection()).getJarFile();</span><br><span class="line">                        <span class="comment">// 从此jar包 得到一个枚举类</span></span><br><span class="line">                        Enumeration&lt;JarEntry&gt; entries = jar.entries();</span><br><span class="line">                        findClassesInPackageByJar(packageName, entries, packageDirName, <span class="literal">true</span>, classes);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="comment">// log.error(&quot;在扫描用户定义视图时从jar包获取文件出错&quot;);</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findClassesInPackageByFile</span><span class="params">(String packageName, String packagePath, <span class="keyword">final</span> <span class="type">boolean</span> recursive, Set&lt;Class&gt; classes)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(packagePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists() || !dir.isDirectory())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取目录下的目录和以.class结尾的文件</span></span><br><span class="line">        File[] dirFiles = dir.listFiles(file -&gt; (recursive &amp;&amp; file.isDirectory()) || file.getName().endsWith(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (File dirFile : dirFiles) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dirFile.isDirectory()) &#123;</span><br><span class="line">                <span class="comment">// 目录继续往里找</span></span><br><span class="line">                findClassesInPackageByFile(packageName + <span class="string">&quot;.&quot;</span> + dirFile.getName(), dirFile.getAbsolutePath(), recursive, classes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 去除.class</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">classFileName</span> <span class="operator">=</span> dirFile.getName().substring(<span class="number">0</span>, dirFile.getName().length() - <span class="number">6</span>);</span><br><span class="line">                <span class="comment">// 添加进class</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    classes.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + <span class="string">&quot;.&quot;</span> + classFileName));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findClassesInPackageByJar</span><span class="params">(String packageName, Enumeration&lt;JarEntry&gt; entries, String packageDirName, <span class="keyword">final</span> <span class="type">boolean</span> recursive, Set&lt;Class&gt; classes)</span> &#123;</span><br><span class="line">        <span class="comment">// 同样的进行循环迭代</span></span><br><span class="line">        <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</span><br><span class="line">            <span class="comment">// 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件</span></span><br><span class="line">            <span class="type">JarEntry</span> <span class="variable">entry</span> <span class="operator">=</span> entries.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> entry.getName();</span><br><span class="line">            <span class="comment">// 如果是以/开头的</span></span><br><span class="line">            <span class="keyword">if</span> (name.charAt(<span class="number">0</span>) == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取后面的字符串</span></span><br><span class="line">                name = name.substring(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果前半部分和定义的包名相同</span></span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(packageDirName)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> name.lastIndexOf(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">                <span class="comment">// 如果以&quot;/&quot;结尾 是一个包</span></span><br><span class="line">                <span class="keyword">if</span> (idx != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取包名 把&quot;/&quot;替换成&quot;.&quot;</span></span><br><span class="line">                    packageName = name.substring(<span class="number">0</span>, idx).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果可以迭代下去 并且是一个包</span></span><br><span class="line">                <span class="keyword">if</span> ((idx != -<span class="number">1</span>) || recursive) &#123;</span><br><span class="line">                    <span class="comment">// 如果是一个.class文件 而且不是目录</span></span><br><span class="line">                    <span class="keyword">if</span> (name.endsWith(<span class="string">&quot;.class&quot;</span>) &amp;&amp; !entry.isDirectory()) &#123;</span><br><span class="line">                        <span class="comment">// 去掉后面的&quot;.class&quot; 获取真正的类名</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> name.substring(packageName.length() + <span class="number">1</span>, name.length() - <span class="number">6</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 添加到classes</span></span><br><span class="line">                            classes.add(Class.forName(packageName + <span class="string">&#x27;.&#x27;</span> + className));</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                            <span class="comment">// .error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span></span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>用户中心项目</title>
    <url>/2023/03/26/Java/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="201ef61504e09a5fd37ed65419923dddebd93f42aee35f58daa12df102387524"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>加密</tag>
        <tag>项目</tag>
        <tag>MyBatis</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>windows11安装安卓子系统</title>
    <url>/2023/04/26/%E5%85%B6%E4%BB%96/windows11%E5%AE%89%E8%A3%85%E5%AE%89%E5%8D%93%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="Windows11-安装安卓子系统"><a href="#Windows11-安装安卓子系统" class="headerlink" title="Windows11 安装安卓子系统"></a>Windows11 安装安卓子系统</h1><p>下载文件 </p>
<p><code>MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral___4dg8wj792vbvbf7r67u.Msixbundle</code></p>
<p>链接：<a href="https://pan.baidu.com/s/1N80EgLr7u-SI9dNENJOihw">https://pan.baidu.com/s/1N80EgLr7u-SI9dNENJOihw</a><br>提取码：me5l</p>
<p>这个是 WSA  接下来要安装 WSA</p>
<p>按 win + r 打开运行 输入 cmd 确定</p>
<p>弹出命令行窗口后 输入下面的命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">add-appxpackage &quot;文件路径/MicrosoftCorporationII.WindowsSubsystemForAndroid_1.<span class="number">7</span>.<span class="number">32815</span>.<span class="number">0</span>_neutral___4dg8wj792vbvbf7r67u.Msixbundle&quot;</span><br></pre></td></tr></table></figure>

<p>文件路径要替换成文件存放的位置，注意不要丢失了文件的后缀</p>
<p>安装好之后在开始栏里面可以看见刚刚安装好的 WSA，点开之后点击文件可以启动，启动的时候可能会报错需要启动虚拟化平台，搜索控制面板，点击程序 - 启用或关闭 windows 功能，勾选 虚拟机平台，或者 H- yper (我也不记得叫什么名字了，我这都是虚拟机平台)，勾选后重启电脑，就可以打开 WSA 的文件管理了</p>
<p>但是还没有安装安卓软件，要怎么安装安卓软件呢</p>
<p>有一个 WSA 工具可以更方便的使用 WSA ，在微软商店中也提供了这个工具的下载，打开 Microsoft Store 搜索 <code>WSA 工具箱</code></p>
<p>如果没有搜到 下面提供了微软商店的下载链接</p>
<p><a href="https://apps.microsoft.com/store/detail/wsa-toolbox/9PPSP2MKVTGT?hl=en-us&gl=us">WSA Toolbox - Microsoft Store Apps</a></p>
<p>下载链接也失效了的话 这个是 github 的仓库地址 点击右边栏的 Releases 下载 latest 版本即可</p>
<p><a href="https://github.com/makazeu/WsaToolbox">makazeu&#x2F;WsaToolbox (github.com)</a></p>
<p>在 WSA 工作箱中根据提示 配置好（检查 ADB 连接到 WSA 这里要打开 WSA 的开发者模式）然后连接 WSA 就可以安装 APK 运行安装的安卓程序了</p>
]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>软件推荐</title>
    <url>/2023/04/07/%E5%85%B6%E4%BB%96/%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<h1 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h1><h2 id="Geek"><a href="#Geek" class="headerlink" title="Geek"></a>Geek</h2><p>卸载软件，小巧，好用，卸载之后还会清除注册表和其他痕迹</p>
<p><a href="https://geekuninstaller.com/">https://geekuninstaller.com/</a></p>
<h2 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a>Ditto</h2><p>Windows 剪切板的拓展，Ctrl + &#96; 弹出</p>
<p><a href="https://apps.microsoft.com/store/detail/ditto-clipboard/9NBLGGH3ZBJQ?hl=zh-cn&gl=cn&rtc=1">https://apps.microsoft.com/store/detail/ditto-clipboard/9NBLGGH3ZBJQ?hl=zh-cn&amp;gl=cn&amp;rtc=1</a></p>
<span id="more"></span>

<h2 id="UTools"><a href="#UTools" class="headerlink" title="UTools"></a>UTools</h2><p>鼠标中键使用，有很多插件，比较喜欢鼠标选中之后弹出翻译的功能，截图也好用。</p>
<p><a href="https://www.u.tools/">https://www.u.tools/</a></p>
<h2 id="Typore"><a href="#Typore" class="headerlink" title="Typore"></a>Typore</h2><p>md文档编辑器，干净简洁，但是现在要钱了</p>
<p><a href="https://www.typoraio.cn/">https://www.typoraio.cn/</a></p>
<h1 id="IDEA-插件"><a href="#IDEA-插件" class="headerlink" title="IDEA 插件"></a>IDEA 插件</h1><h2 id="外观-x2F-使用类"><a href="#外观-x2F-使用类" class="headerlink" title="外观&#x2F;使用类"></a>外观&#x2F;使用类</h2><h3 id="One-Dark-Theme"><a href="#One-Dark-Theme" class="headerlink" title="One Dark Theme"></a>One Dark Theme</h3><p>黑色主题，颜色生动，看的很舒服</p>
<h3 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h3><p>彩色的括号，层次分明</p>
<h3 id="Key-Promoter-X"><a href="#Key-Promoter-X" class="headerlink" title="Key Promoter X"></a>Key Promoter X</h3><p>提示快捷键</p>
<h2 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h2><h3 id="Alibaba-java-Coding-Guidelines"><a href="#Alibaba-java-Coding-Guidelines" class="headerlink" title="Alibaba java Coding Guidelines"></a>Alibaba java Coding Guidelines</h3><p>阿里巴巴 java开发规范</p>
<h3 id="Check-Style-IDEA"><a href="#Check-Style-IDEA" class="headerlink" title="Check Style-IDEA"></a>Check Style-IDEA</h3><p>自动检查Java代码规范</p>
<h3 id="Easy-Javadoc"><a href="#Easy-Javadoc" class="headerlink" title="Easy Javadoc"></a>Easy Javadoc</h3><h3 id="GenerateAllSetter"><a href="#GenerateAllSetter" class="headerlink" title="GenerateAllSetter"></a>GenerateAllSetter</h3><p>生成对象的所有Set</p>
<h3 id="GenerateSerialVersionUID"><a href="#GenerateSerialVersionUID" class="headerlink" title="GenerateSerialVersionUID"></a>GenerateSerialVersionUID</h3><p>快捷生成序列化</p>
<h3 id="GitHub-Copilot"><a href="#GitHub-Copilot" class="headerlink" title="GitHub Copilot"></a>GitHub Copilot</h3><p>编程助手，结合了ChatGPT 快捷生成代码</p>
<h3 id="MyBatisX"><a href="#MyBatisX" class="headerlink" title="MyBatisX"></a>MyBatisX</h3><p>根据数据库生成MyBatis的model，service，controller类</p>
<h3 id="Sequence-Diagram"><a href="#Sequence-Diagram" class="headerlink" title="Sequence Diagram"></a>Sequence Diagram</h3><p>时序图</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>报错</title>
    <url>/2023/05/06/%E5%85%B6%E4%BB%96/%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="java-No-serializer-found-for-class"><a href="#java-No-serializer-found-for-class" class="headerlink" title="java No serializer found for class"></a>java No serializer found for class</h1><h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><p>com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class edu.pyj.usercenter.common.response.Result and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Result 缺少 get 方法</p>
<span id="more"></span>

<h1 id="在实现单点登录时碰到的问题"><a href="#在实现单点登录时碰到的问题" class="headerlink" title="在实现单点登录时碰到的问题"></a>在实现单点登录时碰到的问题</h1><h2 id="写拦截器时-RedisTemplate-为null"><a href="#写拦截器时-RedisTemplate-为null" class="headerlink" title="写拦截器时 RedisTemplate 为null"></a>写拦截器时 RedisTemplate 为null</h2><p>原因：</p>
<p>springboot拦截器是在Bean实例化之前执行的</p>
<p>解决方法</p>
<ul>
<li>在拦截器配置类里面先实例化拦截器，然后再获取</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LoginInterceptor <span class="title function_">getLoginInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/register&quot;</span>);</span><br><span class="line">        <span class="comment">// 排除路径</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建Redis工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">// 项目运行时就注入Spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值一个静态的redis</span></span><br><span class="line">    <span class="comment">// 调用时直接调用这个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RedisTemplate&lt;Object, Object&gt; redis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span> <span class="comment">// 构造时赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">redisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        redis = <span class="built_in">this</span>.redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用</span><br><span class="line">    RedisUtils.redis;</span><br></pre></td></tr></table></figure>

<h2 id="序列化问题"><a href="#序列化问题" class="headerlink" title="序列化问题"></a>序列化问题</h2><p>在 (User)redisTemplate.opsForValue().get(token) 时出现问题，不能将String cast to User，是存入数据时存入的是 String， 在 Controller 中误将数据写成了 String 存入</p>
<p>修改之后依然报错，</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Could <span class="keyword">not</span> read JSON: Cannot construct instance of `edu.pyj.usercenter.model.response.UserLoginResponse` (no Creators, like default constructor, <span class="keyword">exist</span>): cannot deserialize from Object value (no delegate- or property-based Creator)</span><br><span class="line"> <span class="built_in">at</span> [Source: (byte[])&quot;&#123;&quot;@class&quot;:&quot;edu.pyj.usercenter.model.response.UserLoginResponse&quot;,&quot;id&quot;:<span class="number">2</span>,&quot;username&quot;:&quot;shangchun&quot;,&quot;userAccount&quot;:&quot;shangchun&quot;,&quot;avatarUrl&quot;:&quot;avatar/avatar1.jpg&quot;,&quot;gender&quot;:null,&quot;userPassword&quot;:null,&quot;phone&quot;:null,&quot;email&quot;:null,&quot;userStatus&quot;:<span class="number">0</span>,&quot;createTime&quot;:null,&quot;updateTime&quot;:null,&quot;isDelete&quot;:null,&quot;userRole&quot;:<span class="number">1</span>,&quot;token&quot;:&quot;<span class="number">857</span>f9be48eb540229c56adca329997c1&quot;&#125;&quot;; line: <span class="number">1</span>, column: <span class="number">65</span>]</span><br></pre></td></tr></table></figure>

<p>这是没有实现构造器添加构造器就可以了</p>
<p>还有几种处理方式：</p>
<ol>
<li>使用Jackson的注解：如果 <code>UserLoginResponse</code> 类已经有了构造函数，但没有默认构造函数或者构造函数不可见（private或protected），可以使用Jackson的注解来指定使用其他构造函数或工厂方法进行对象的创建。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonCreator</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UserLoginResponse</span><span class="params">(<span class="meta">@JsonProperty(&quot;id&quot;)</span> <span class="type">int</span> id, <span class="meta">@JsonProperty(&quot;username&quot;)</span> String username, ...)</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>自定义反序列化器：如果上述方法仍然无法解决问题，你可以考虑自定义一个Jackson的反序列化器，用于将JSON转换为 <code>UserLoginResponse</code> 对象。你可以实现 <code>JsonDeserializer</code> 接口，并在 <code>deserialize</code> 方法中自定义对象的创建和属性的设置。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginResponseDeserializer</span> <span class="keyword">extends</span> <span class="title class_">JsonDeserializer</span>&lt;UserLoginResponse&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserLoginResponse <span class="title function_">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 自定义对象的创建和属性的设置逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，将自定义的反序列化器与属性或类进行关联，在属性或类上使用 <code>@JsonDeserialize(using = UserLoginResponseDeserializer.class)</code> 注解。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>报错解决</tag>
      </tags>
  </entry>
  <entry>
    <title>资源分享</title>
    <url>/2023/03/26/%E5%85%B6%E4%BB%96/%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h1 id="【架构师】零基础到精通——高可用"><a href="#【架构师】零基础到精通——高可用" class="headerlink" title="【架构师】零基础到精通——高可用"></a>【架构师】零基础到精通——高可用</h1><p> <a href="https://articles.zsxq.com/id_wfrwhhkqn8x3.html">https://articles.zsxq.com/id_wfrwhhkqn8x3.html</a></p>
<h1 id="数据结构可视化"><a href="#数据结构可视化" class="headerlink" title="数据结构可视化"></a>数据结构可视化</h1><p><a href="http://www.rmboot.com/Algorithms.html">http://www.rmboot.com/Algorithms.html</a></p>
<h1 id="Java常见设计模式总结"><a href="#Java常见设计模式总结" class="headerlink" title="Java常见设计模式总结"></a>Java常见设计模式总结</h1><p><a href="https://blog.csdn.net/a745233700/article/details/120371090?spm=1001.2014.3001.5502">https://blog.csdn.net/a745233700/article/details/120371090?spm=1001.2014.3001.5502</a></p>
<h1 id="图说设计模式"><a href="#图说设计模式" class="headerlink" title="图说设计模式"></a>图说设计模式</h1><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/">https://design-patterns.readthedocs.io/zh_CN/latest/</a></p>
<p><a href="https://chat.openai.com/chat/eec202d8-3609-45c3-85f6-e8092966ef00">技术 (openai.com)</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-优势成长</title>
    <url>/2023/03/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E4%BC%98%E5%8A%BF%E6%88%90%E9%95%BF/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>个人成长</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2023/04/05/%E9%80%9A%E7%94%A8/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>《大话设计模式》、《人人都懂设计模式》记录</p>
<h1 id="软件开发原则"><a href="#软件开发原则" class="headerlink" title="软件开发原则"></a>软件开发原则</h1><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p><strong>对于一个类只有一个引起它变化的原因</strong></p>
<p>一个类只负责尽可能独立的一项功能，尽可能少的职责</p>
<p>优点：</p>
<p>（1）功能单一，职责清晰。</p>
<p>（2）增强可读性，方便维护。</p>
<p>缺点：</p>
<p>（1）拆分得太详细，类的数量会急剧增加。</p>
<p>（2）职责的度量没有统一的标准，需要根据项目实现情况而定。</p>
<span id="more"></span>

<h2 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h2><p><strong>对于扩展是开放的（Open for extension），对于更改是封闭的（Closed for modification）</strong></p>
<p>无论模块是多么的‘封闭’，都会存在一些无法对之封闭的变化。既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪种变化封闭做出选择。他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化。但是预先猜测是很难的，所以等到变化发生时立即采取行动，创建抽象来隔离以后发生的同类变化。面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码。</p>
<p>开放-封闭原则是面向对象设计的核心所在。</p>
<h2 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h2><p><strong>子类型必须能够替换掉它们的父类型</strong> </p>
<blockquote>
<p>「一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化」</p>
</blockquote>
<p>只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。</p>
<p>依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。</p>
<h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><p><strong>针对接口编程，不要对实现编程</strong></p>
<p><strong>依赖倒转原则</strong></p>
<ul>
<li>A．高层模块不应该依赖低层模块。两个都应该依赖抽象。</li>
<li>B．抽象不应该依赖细节。细节应该依赖抽象。</li>
</ul>
<blockquote>
<p>做新项目时，发现业务逻辑的高层模块都是一样的，但客户却希望使用不同的数据库或存储信息方式，这时就出现麻烦了。我们希望能再次利用这些高层模块，但高层模块都是与低层的访问数据库绑定在一起的，没办法复用这些高层模块，这就非常糟糕了。</p>
</blockquote>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><blockquote>
<p>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。</p>
<p>每一个逻辑单元应该对其他逻辑单元有最少的了解</p>
</blockquote>
<p>迪米特法则还有一个英文解释是：<strong>talk only to your immediate friends（只和直接的朋友交流）</strong>。什每个对象都必然会与其他的对象有耦合关系，两个对象之间的耦合就会成为朋友关系。而出现在成员变量、方法的输入输出参数中的类就是直接的朋友。迪米特法则要求只和直接的朋友通信，局部变量就不是直接朋友，陌生的类最好不要以局部变量的形式出现在类的内部。</p>
<p>迪米特法则根本思想，是强调了类之间的松耦合。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。</p>
<h3 id="狭义的迪米特法则的缺点"><a href="#狭义的迪米特法则的缺点" class="headerlink" title="狭义的迪米特法则的缺点"></a>狭义的迪米特法则的缺点</h3><ol>
<li>在系统里造出大量的小方法，这些方法仅仅是传递间接的调用，与系统的商务逻辑无关。</li>
<li>遵循类之间的迪米特法则会是一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联。但是，这也会造成系统的不同模块之间的通信效率降低，也会使系统的不同模块之间不容易协调。</li>
</ol>
<p>应用：</p>
<p>设计模式的门面&#x2F;外观模式（Facade）和中介模式（Mediator）</p>
<h1 id="合成／聚合复用原则"><a href="#合成／聚合复用原则" class="headerlink" title="合成／聚合复用原则"></a>合成／聚合复用原则</h1><blockquote>
<p>合成／聚合复用原则（CARP），尽量使用合成／聚合，尽量不要使用类继承。</p>
</blockquote>
<p>聚合表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分；合成则是一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样</p>
<p>优先使用对象的合成&#x2F;聚合将有助于保持每个类被封装，并被集中在单个任务上。这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物</p>
<h1 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1><ul>
<li><p>创建型模式</p>
<ul>
<li>单例模式</li>
<li>工厂方法模式(简单工厂、工厂、 抽象工厂)</li>
<li>原型模式（克隆模式）</li>
<li>建造者模式</li>
</ul>
</li>
<li><p>行为型模式：类或者对象之间交互的行为，如何划分职责、更好的完成任务</p>
<ul>
<li>策略模式</li>
<li>模板方法模式</li>
<li>观察者模式</li>
</ul>
</li>
<li><p>结构型模式：将类和对象结合在一起形成一个更强大的结构</p>
<ul>
<li>装饰模式</li>
<li>代理模式</li>
<li>外观模式</li>
<li>状态模式</li>
<li>适配器模式</li>
<li>迭代器模式</li>
<li>责任链模式</li>
</ul>
</li>
</ul>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote>
<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
</blockquote>
<p>让类自身负责保存它的唯一实例。这个类可以保证没有其他实例可以被创建，并且它可以提供一个访问该实例的方法。</p>
<h2 id="设计要点"><a href="#设计要点" class="headerlink" title="设计要点"></a>设计要点</h2><p>只有一个类，类中由一个 getInstance() 方法获取这个类唯一的示例</p>
<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><blockquote>
<p>定义一个类负责创建其他类的实例，通过参数决定创建哪个类的实例</p>
</blockquote>
<h2 id="设计要点-1"><a href="#设计要点-1" class="headerlink" title="设计要点"></a>设计要点</h2><p>工厂类：负责创建对象</p>
<p>产品类：创建的产品的抽象类</p>
<p>具体产品类：具体实现的产品</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>这是一个算法操作</p>
<p>工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Operation02 <span class="title function_">createOperation</span><span class="params">(String mathChar)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (mathChar) &#123;</span><br><span class="line">            <span class="keyword">case</span>  <span class="string">&quot;+&quot;</span> :</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AddOperation</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubOperation</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MulOperation</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DivOperation</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>产品类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Operation02</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> _numberA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> _numberB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">get_numberA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _numberA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set_numberA</span><span class="params">(<span class="type">double</span> _numberA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._numberA = _numberA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">get_numberB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _numberB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set_numberB</span><span class="params">(<span class="type">double</span> _numberB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._numberB = _numberB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体算法操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AddOperation</span> <span class="keyword">extends</span> <span class="title class_">Operation02</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() + get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubOperation</span> <span class="keyword">extends</span> <span class="title class_">Operation02</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() - get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MulOperation</span> <span class="keyword">extends</span> <span class="title class_">Operation02</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() * get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DivOperation</span> <span class="keyword">extends</span> <span class="title class_">Operation02</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (get_numberB() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Throwable</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> get_numberA() / get_numberB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>产品有明显的继承关系，并且产品的类型不多</p>
<p>所有的产品有相同的方法和类似的属性，使用者希望通过参数获取到合适的对象</p>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式是对简单工厂模式的拓展优化，简单工厂模式中通过 switch case 方法创建对象，新增条件时增加 case 分支，违反了开闭原则。</p>
<p>针对这个问题，对工厂类进行抽象，分为工厂父类和不同的工厂子类，工厂子类创建不同的产品子类</p>
<p><strong>定义</strong></p>
<blockquote>
<p>定义一个创建对象（实例化对象）的接口，让子类来决定创建哪个类的实例。工厂方法使一个类的实例化延迟到其子类。</p>
</blockquote>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>工厂父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperationFactory2</span> &#123;</span><br><span class="line">    MathOperation <span class="title function_">createOperation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加法工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddOperationFactory</span> <span class="keyword">implements</span> <span class="title class_">OperationFactory2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MathOperation <span class="title function_">createOperation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AddOperation</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 减法工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubOperationFactory</span> <span class="keyword">implements</span> <span class="title class_">OperationFactory2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MathOperation <span class="title function_">createOperation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubOperation</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 乘法工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MulOperationFactory</span> <span class="keyword">implements</span> <span class="title class_">OperationFactory2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MathOperation <span class="title function_">createOperation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MulOperation</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 除法工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DivOperationFactory</span> <span class="keyword">implements</span> <span class="title class_">OperationFactory2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MathOperation <span class="title function_">createOperation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DivOperation</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="与简单工厂相比"><a href="#与简单工厂相比" class="headerlink" title="与简单工厂相比"></a>与简单工厂相比</h2><p>简单工厂实现三个不同的加法操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单工厂</span></span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">operation1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationFactory</span>().createOperation(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">operation2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationFactory</span>().createOperation(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">operation3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationFactory</span>().createOperation(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">operation1.set_numberA(<span class="number">1</span>);</span><br><span class="line">operation1.set_numberB(<span class="number">2</span>);</span><br><span class="line">System.out.println(operation1.getResult());</span><br><span class="line"></span><br><span class="line">operation2.set_numberA(<span class="number">2</span>);</span><br><span class="line">operation2.set_numberB(<span class="number">3</span>);</span><br><span class="line">System.out.println(operation2.getResult());</span><br><span class="line"></span><br><span class="line">operation3.set_numberA(<span class="number">4</span>);</span><br><span class="line">operation3.set_numberB(<span class="number">5</span>);</span><br><span class="line">System.out.println(operation3.getResult());</span><br></pre></td></tr></table></figure>

<p>当操作需要批量更改为其他时，<strong>需要修改三个createOperation中的参数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MathOperation</span> <span class="variable">operation1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationFactory</span>().createOperation(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">operation2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationFactory</span>().createOperation(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">operation3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationFactory</span>().createOperation(<span class="string">&quot;-&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>而工厂方法实现三个加法操作，当操作批量统一修改时，只需要更改创建的工厂类 <code> AddOperationFactory()</code> 即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂方法</span></span><br><span class="line"><span class="type">OperationFactory2</span> <span class="variable">addFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddOperationFactory</span>();</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">addOperation1</span> <span class="operator">=</span> addFactory.createOperation();</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">addOperation2</span> <span class="operator">=</span> addFactory.createOperation();</span><br><span class="line"><span class="type">MathOperation</span> <span class="variable">addOperation3</span> <span class="operator">=</span> addFactory.createOperation();</span><br><span class="line">addOperation1.set_numberA(<span class="number">1</span>);</span><br><span class="line">addOperation1.set_numberB(<span class="number">2</span>);</span><br><span class="line">System.out.println(addOperation1.getResult());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addOperation2.set_numberA(<span class="number">2</span>);</span><br><span class="line">addOperation2.set_numberB(<span class="number">3</span>);</span><br><span class="line">System.out.println(addOperation2.getResult());</span><br><span class="line"></span><br><span class="line">addOperation3.set_numberA(<span class="number">4</span>);</span><br><span class="line">addOperation3.set_numberB(<span class="number">5</span>);</span><br><span class="line">System.out.println(addOperation3.getResult());</span><br></pre></td></tr></table></figure>





<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><blockquote>
<p>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。</p>
</blockquote>
<p>需要访问一个聚集对象，而且不管这些对象是什么都需要遍历的时候，应该考虑用迭代器模式。</p>
<p>为遍历不同的聚集结构提供如开始、下一个、是否结束、当前哪一项等统一的接口。</p>
<p>实际上在 Java 中的 foreach 就是这种模式的体现</p>
<h2 id="设计要点-2"><a href="#设计要点-2" class="headerlink" title="设计要点"></a>设计要点</h2><p>迭代器（Iterator）迭代抽象类，定义迭代器的统一接口比如得到开始对象，下一个对象，是否结束，当前对象</p>
<p>具体迭代器类，实现了迭代器的方法，具体迭代的方式</p>
<p>容器类：被迭代其中内容的类</p>
<p>设计迭代时需要注意容器的数据结构，需要确定迭代器中实现的功能</p>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote>
<p>策略模式（Strategy）：它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p>
</blockquote>
<p>策略模式是一种定义一系列算法的方法。这些算法完成的都是相同的工作，只是实现不同，策略模式用相同的方法调用所有的算法，减少各种算法类与使用算法类之间的耦合。</p>
<p>策略模式的Strategy类层次为Context定义了一系列可供重用的算法和行为，提取出这些算法和行为中的公共功能。</p>
<p><strong>使用原因</strong></p>
<p>当不同的行为放在一个类中时，难以避免使用条件判断选择行为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">//算法方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (条件A) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;算法A实现&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (条件B) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;算法B实现&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (条件C) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;算法C实现&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设计要点-3"><a href="#设计要点-3" class="headerlink" title="设计要点"></a>设计要点</h2><p>策略模式主要有三个角色：</p>
<ol>
<li>上下文环境（Context）：承上启下的封装作用，屏蔽上层应用对策略的直接访问</li>
<li>策略的抽象（Strategy）：策略算法的抽象类，定义统一的接口，规定每个子类实现的方法</li>
<li>具体的策略实现</li>
</ol>
<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p>将行为封装在独立的Strategy子类，根据不同的子类调用行为方法消除条件语句。</p>
<p>调用不同算法的示例：</p>
<p><strong>策略抽象的算法类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略抽象的算法类</span></span><br><span class="line"><span class="comment"> * 定义所有支持的算法的公共接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">//算法方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>具体实现的算法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体算法A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//算法A实现方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;算法A实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体算法B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyB</span> <span class="keyword">extends</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">//算法B实现方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;算法B实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体算法C</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteStrategyC</span> <span class="keyword">extends</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">//算法C实现方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AlgorithmInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;算法C实现&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>上下文环境，屏蔽了对具体算法的访问</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 上下文核心</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line"></span><br><span class="line">    Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ContextInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        strategy.AlgorithmInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 由于实例化不同的策略，最终调用context.ContextInterface时的结果也不同</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">ConcreteStrategyA</span>());</span><br><span class="line">        context.ContextInterface();</span><br><span class="line">        context = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">ConcreteStrategyB</span>());</span><br><span class="line">        context.ContextInterface();</span><br><span class="line">        context = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">ConcreteStrategyC</span>());</span><br><span class="line">        context.ContextInterface();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="策略模式和简单工厂模式的结合"><a href="#策略模式和简单工厂模式的结合" class="headerlink" title="策略模式和简单工厂模式的结合"></a>策略模式和简单工厂模式的结合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(String type)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">            <span class="built_in">this</span>.strategy = <span class="keyword">new</span> <span class="title class_">ConcreteStrategyA</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">            <span class="built_in">this</span>.strategy = <span class="keyword">new</span> <span class="title class_">ConcreteStrategyB</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">            <span class="built_in">this</span>.strategy = <span class="keyword">new</span> <span class="title class_">ConcreteStrategyC</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Context</span> <span class="variable">context1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    context1.ContextInterface();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这种情况下，客户端只接触到了 Context 类， 没有接触到算法抽象类 Strategy，具体的算法彻底与客户端分离， 耦合更加降低。</p>
<h2 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h2><p>在不同情况下使用不同的业务规则，考虑使用策略模式处理这种变化</p>
<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><blockquote>
<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<p>核心思想是：将产品的创建过程与产品本身分离开来，使得创建过程更加清晰，能够更加精确地控制复杂对象的创建过程，让使用者可以用相同的创建过程创建不同的产品</p>
<p><strong>与工厂模式的区别</strong></p>
<p>工厂模式关注的是整个产品（整体对象）的生成，即成品的生成；</p>
<p>构建模式关注的是产品的创建过程和细节，一步一步地由各个子部件构建为一个成品。</p>
<h2 id="设计要点-4"><a href="#设计要点-4" class="headerlink" title="设计要点"></a>设计要点</h2><ol>
<li>建造类：抽象类，定义了构建的方法</li>
<li>具体建造类</li>
<li>指挥类：用于执行建造类中的构建方法，负责管理每一种产品的创建数量和顺序</li>
</ol>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>对象的创建过程复杂，将产品的创建过程和它本身的功能分离开来。</li>
<li>产品有很多种类，每个种类之间内部结构比较类似，但有很多差异；不同的创建顺序或不同的组合方式，将创建不同的产品。</li>
</ol>
<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><blockquote>
<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
</blockquote>
<p>模板方法模式是通过把不变行为搬移到父类，去除子类中的重复代码</p>
<h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p>（1）对一些复杂的算法进行分割，将其算法中固定不变的部分设计为模板方法和父类具体方法，而一些可以改变的细节由其子类来实现。即一次性实现一个算法的不变部分，并将可变的行为留给子类来实现。</p>
<p>（2）各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。</p>
<p>（3）需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。</p>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote>
<p>为其他对象提供一种代理控制这个对象的访问，一个对象完成某项动作或任务，是通过对另一个对象的引用来完成的，这种模式叫代理模式。</p>
</blockquote>
<p>核心思想：</p>
<ul>
<li>使用一个额外的间接层来支持分散的、可控的、智能的访问。</li>
<li>增加一个包装和委托来保护真实的组件，以避免过度复杂。</li>
</ul>
<h2 id="设计要点-5"><a href="#设计要点-5" class="headerlink" title="设计要点"></a>设计要点</h2><p>代理模式中需要找到和区分三个角色</p>
<ol>
<li>主题：定义操作、活动、任务的接口</li>
<li>真实主题：真正完成操作、活动、任务的具体类</li>
<li>代理主题：代替真实主题完成操作、活动、任务的代理类</li>
</ol>
<h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h2><p>主题类定义了一个操作: request()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真实主题类实现了 request() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真实主题类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RealSubject request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理主题在进行代理真实主题的同时，进行了拓展请求前操作 preRequest() 和请求后操作 postRequest()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxySubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject == <span class="literal">null</span>) &#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        preRequest();</span><br><span class="line">        realSubject.request();</span><br><span class="line">        postRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy preRequest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxy postRequest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>远程代理，也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实</li>
<li>虚拟代理，不想或者不能直接引用一个对象时</li>
<li>安全代理，用来控制真实对象访问时的权限，一般用于对象应该有不同的访问权限的时候。</li>
<li>智能指引，是指当调用真实的对象时，代理处理另外一些事</li>
</ol>
<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><blockquote>
<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
</blockquote>
<p>当客户提交一个请求时，请求是沿链传递直至有一个ConcreteHandler对象负责处理它。</p>
<h2 id="设计要点-6"><a href="#设计要点-6" class="headerlink" title="设计要点"></a>设计要点</h2><p>Handler 处理请求的接口，里面定义了下一个处理类和当前类的处理逻辑的接口</p>
<p>ConcreteHandler 具体处理者类，请求可以处理就处理，不能处理如果有后续的处理者就转发</p>
<p>（1）请求者与请求内容：确认谁要发送请求，发送请求的对象称为请求者。请求的内容通过发送请求时的参数进行传递。</p>
<p>（2）一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理</p>
<h2 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h2><p>有多个对象可以处理同一个请求，具体哪个对象处理该请求在运行时刻自动确定。</p>
<p>比如常见的审批流程。</p>
<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><blockquote>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
</blockquote>
<p>产品有多种实现时，将多种实现方式由多种工厂分配，这种时候将工厂再进行抽象</p>
<p><strong>优点</strong></p>
<p>解决了具有二级分类的产品的创建</p>
<p>易于交换产品系列，由于具体工厂类，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不同的产品配置。</p>
<p>具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操纵实例，产品的具体类名也被具体工厂的实现分离</p>
<p><strong>缺点</strong></p>
<p>增加新的产品，需要增加至少三个类（产品抽象类，实现产品方式一类，实现产品方式二类），修改至少三个工厂（工厂抽象类，工厂一类，工厂二类）</p>
<p>如果产品的分类超过二级，如三级甚至更多级，抽象工厂模式将会变得非常臃肿。<br>不能解决产品有多种分类、多种组合的问题。</p>
<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><blockquote>
<p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
</blockquote>
<p>系统的数据和行为都正确，但接口不符时，应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。</p>
<p>适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况</p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>将一个对象经过包装或转换后使它符合指定的接口，使得调用方可以像使用接口的一般对象一样使用它。这一思想在生活中可谓处处可见，比如插座转换器，电压转换功能的变压器插座，最常见的各种转接头，如撤销耳机孔之后，需要用耳机线转接头转成Type-C接头，MiniDP转HDMI接头、HDMI转VGA线转换器、Micro USB转Type-C接头等。</p>
<p><strong>优点</strong></p>
<p>（1）可以让两个没有关联的类一起运行，起中间转换的作用。</p>
<p>（2）提高了类的复用率。</p>
<p>（3）灵活性好，不会破坏原有系统。</p>
<p><strong>缺点</strong></p>
<p>（1）如果原有系统没有设计好（如Target不是抽象类或接口，而是一个实体类），适配模式将很难实现。</p>
<p>（2）过多地使用适配器，容易使代码结构混乱，如明明看到调用的是 A 接口，内部调用的却是B接口的实现。</p>
<h2 id="设计要点-7"><a href="#设计要点-7" class="headerlink" title="设计要点"></a>设计要点</h2><p>目标类（Target） 期望的目标接口，要转换成的接口</p>
<p>源对象（Adaptee）需要转换的接口</p>
<p>适配器（Adapter）适配器，将源对象转换为目标对象</p>
<h2 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h2><p>使用现有的类，但是这些类的接口不符合系统的要求</p>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote>
<p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>
</blockquote>
<h2 id="设计要点-8"><a href="#设计要点-8" class="headerlink" title="设计要点"></a>设计要点</h2><ol>
<li>观察者抽象类： 观察者抽象类定义了一个更新的接口，当被观察者发生变化时，调用观察者的更新方法</li>
<li>被观察者抽象类：被观察者抽象类定义了一个观察者集合，用于存储所有的观察者对象，同时定义了添加、删除观察者对象的方法，以及通知所有观察者的抽象方法</li>
<li>具体的观察者类</li>
<li>具体的被观察者类</li>
</ol>
<h2 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h2><p>观察者抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被观察者抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notifyObserver</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的观察者类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String observerState;</span><br><span class="line">  <span class="keyword">private</span> ConcreteSubject subject;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ConcreteObserver</span><span class="params">(ConcreteSubject subject, String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    observerState = subject.getSubjectState();</span><br><span class="line">    System.out.println(<span class="string">&quot;观察者&quot;</span> + name + <span class="string">&quot;的新状态是&quot;</span> + observerState);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的被观察者类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String subjectState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getSubjectState</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> subjectState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubjectState</span><span class="params">(String subjectState)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subjectState = subjectState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">    observers.add(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">    observers.remove(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObserver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">      observer.update();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>对象的创建过程复杂，将产品的创建过程和它本身的功能分离开来。</li>
<li>产品有很多种类，每个种类之间内部结构比较类似，但有很多差异；不同的创建顺序或不同的组合方式，将创建不同的产品。</li>
</ol>
<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><blockquote>
<p>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
</blockquote>
<p>核心思想：用一个简单的接口来封装一个复杂的系统，使这个系统更容易使用。</p>
<h2 id="设计要点-9"><a href="#设计要点-9" class="headerlink" title="设计要点"></a>设计要点</h2><ol>
<li>外观类：为子系统封装统一的对外接口，这个类不负责具体的业务逻辑，具体的业务逻辑由子系统完成。</li>
<li>子系统：由多个类组成的具有某一特定功能的系统，为整个系统提供特定的功能或服务。</li>
</ol>
<h2 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h2><p>在设计初期阶段，应该要有意识的将不同的两个层分离。</p>
<p>在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观Facade可以提供一个简单的接口，减少它们之间的依赖。</p>
<p>第三，在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了，为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作</p>
<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><blockquote>
<p>桥接模式（Bridge），将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>
</blockquote>
<p>抽象与它的实现分离的意思是由于实现的方式有多种，桥接模式的核心意图就是把这些实现独立出来，让它们各自地变化。这就使得每种实现的变化不会影响其他实现，从而达到应对变化的目的。</p>
<h2 id="设计思想-1"><a href="#设计思想-1" class="headerlink" title="设计思想"></a>设计思想</h2><p>实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。</p>
<h2 id="使用场景-5"><a href="#使用场景-5" class="headerlink" title="使用场景"></a>使用场景</h2><p>一个对象有多个维度独立变化，每添加一个维度导致大量类增加使系统臃肿</p>
<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><blockquote>
<p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p>
</blockquote>
<p>像点餐的订单一样，发送者（客户）与接收者（厨师）没有任何依赖关系，我们只要发送订单就能完成想要完成的任务，这种模式叫作命令模式。</p>
<p>命令模式的最大特点是将具体的命令与对应的接收者相关联（捆绑），使得调用方不用关心具体的行动执行者及如何执行，只要发送正确的命令，就能准确无误地完成相应的任务。</p>
<h2 id="设计要点-10"><a href="#设计要点-10" class="headerlink" title="设计要点"></a>设计要点</h2><p>命令模式中主要有四个角色</p>
<ol>
<li>命令（Command）：要完成的任务，或要执行的动作，这是命令模式的核心角色。</li>
<li>接收者（Receiver）：任务的具体实施方，或行动的真实执行者。</li>
<li>调度者（Invoker）：接收任务并发送命令，对接用户的需求并执行内部的命令，负责外部用户与内部命令的交互。</li>
<li>用户（Client）：命令的使用者，即真正的用户。</li>
</ol>
<h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><blockquote>
<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>
</blockquote>
<p>将一个对象的状态或内容记录起来，在状态发生改变或出现异常时，可以恢复对象之前的状态或内容，这种模式叫做备忘模式。</p>
<h2 id="设计要点-11"><a href="#设计要点-11" class="headerlink" title="设计要点"></a>设计要点</h2><p>备忘模式中主要有三个角色</p>
<ol>
<li>发起人（Originator）：需要进行备份的对象。</li>
<li>备忘录（Memento）：备份的状态，即一个备份的存档。</li>
<li>备忘录管理者（Caretaker）：备份存档的管理者，由它负责与发起人的交互。</li>
</ol>
<h2 id="使用场景-6"><a href="#使用场景-6" class="headerlink" title="使用场景"></a>使用场景</h2><p>适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多属性中的一小部分时，Originator可以根据保存的Memento信息还原到前一状态。</p>
<p>在某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储可撤销操作的状态</p>
<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><blockquote>
<p>将对象组合成树形结构以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
</blockquote>
<p>把对象组合成树形结构，以表示“部分-整体”的层次结构的设计模式就叫组合模式。</p>
<h2 id="设计要点-12"><a href="#设计要点-12" class="headerlink" title="设计要点"></a>设计要点</h2><p>两个角色</p>
<p>可以有子节点的复合组件 （Composite）</p>
<p>基础组件（Component）</p>
<h2 id="使用场景-7"><a href="#使用场景-7" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>对象之间有明显的层次关系</li>
<li>组合对象与单个对象具有相同的行为，统一的使用组合结构中的所有对象</li>
</ol>
<p>需求中是体现部分与整体层次的结构时，以及你希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑用组合模式了。</p>
<h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><blockquote>
<p>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</p>
</blockquote>
<p>状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。</p>
<p>核心思想：一个事物（对象）有多种状态，在不同的状态下所表现出来的行为和属性不一样。</p>
<h2 id="设计要点-13"><a href="#设计要点-13" class="headerlink" title="设计要点"></a>设计要点</h2><p>状态类（State）：封装 Context 特定状态下相关的行为</p>
<p>具体状态类（ConcreteState）</p>
<p>上下文环境类（Context）负责具体状态的切换</p>
<h2 id="使用场景-8"><a href="#使用场景-8" class="headerlink" title="使用场景"></a>使用场景</h2><p>一个对象的行为取决于它的状态，并且它在运行时可能经常改变它的状态，从而改变它的行为。</p>
<p>一个操作中含有庞大的多分支的条件语句，这些分支依赖于该对象的状态，且每一个分支的业务逻辑都非常复杂时，我们可以使用状态模式来拆分不同的分支逻辑，使程序有更好的可读性和可维护性。</p>
<h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p>
<p>装饰模式是为已有功能动态地添加更多功能的一种方式。</p>
<p><strong>装饰模式的优点：</strong></p>
<p>有效地把类的核心职责和装饰功能区分开了。而且可以去除相关类中重复的装饰逻辑。</p>
<h2 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h2><p>当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或主要行为。但这种做法的问题在于，它们在主类中加入了新的字段，新的方法和新的逻辑，从而增加了主类的复杂度，而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * version 1</span></span><br><span class="line"><span class="comment"> * 装饰模式</span></span><br><span class="line"><span class="comment"> * 人穿衣服，给Person类添加穿某个衣服动作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person1</span> &#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wearTShirt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;T恤 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wearJeans</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;牛仔裤 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wearJacket</span> <span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;夹克 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//..... 等等穿方法 如果要增加装扮，需要修改person类 违背开闭原则</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;穿好了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person1</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person1</span>(<span class="string">&quot;上春&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;穿衣服：&quot;</span>);</span><br><span class="line">        person1.wearTShirt();</span><br><span class="line">        person1.wearJeans();</span><br><span class="line">        person1.wearJacket();</span><br><span class="line">        person1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * version2</span></span><br><span class="line"><span class="comment"> * 提取穿衣服动作，抽象衣服 实现开闭原则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 穿好了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 做到了服饰与人 类的分离，但是这种方式衣服与人无关 只是将衣服一个一个词输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person2</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;上春&quot;</span>);</span><br><span class="line">        <span class="type">TShirt</span> <span class="variable">ts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TShirt</span>();</span><br><span class="line">        <span class="type">Jeans</span> <span class="variable">nzk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jeans</span>();</span><br><span class="line">        <span class="type">Jacket</span> <span class="variable">jk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jacket</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;穿衣服：&quot;</span>);</span><br><span class="line">        ts.show();</span><br><span class="line">        nzk.show();</span><br><span class="line">        jk.show();</span><br><span class="line">        person1.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服饰父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Finery</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span> <span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TShirt</span> <span class="keyword">extends</span>  <span class="title class_">Finery</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;T恤 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jeans</span> <span class="keyword">extends</span>  <span class="title class_">Finery</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;牛仔裤 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jacket</span> <span class="keyword">extends</span>  <span class="title class_">Finery</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;夹克 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>装饰模式提供了一个非常好的解决方案，它把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象，因此，当需要执行特殊行为时，客户代码就可以在运行时根据需要有选择地、按顺序地使用装饰功能包装对象了。</p>
<h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * version3</span></span><br><span class="line"><span class="comment"> * 装饰模式</span></span><br><span class="line"><span class="comment"> * 动态的给对象添加额外的职责，增加功能</span></span><br><span class="line"><span class="comment"> * 使用Person2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person2</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person2</span>(<span class="string">&quot;上春&quot;</span>);</span><br><span class="line">        <span class="type">TShirt</span> <span class="variable">tShirt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TShirt</span>();</span><br><span class="line">        <span class="type">Jacket</span> <span class="variable">jk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jacket</span>();</span><br><span class="line">        <span class="type">Jeans</span> <span class="variable">nzk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jeans</span>();</span><br><span class="line"></span><br><span class="line">        tShirt.Decorate(person1);</span><br><span class="line">        jk.Decorate(tShirt);</span><br><span class="line">        nzk.Decorate(jk);</span><br><span class="line">        nzk.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Finery2</span> <span class="keyword">extends</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被拓展的对象</span></span><br><span class="line">    Person2 person;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Decorate</span> <span class="params">(Person2 person)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里不是super.show 调用person.show 实际上是子类中调用实现对person.show方法的拓展</span></span><br><span class="line">        <span class="keyword">if</span>(person != <span class="literal">null</span>) &#123;</span><br><span class="line">            person.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TShirt</span> <span class="keyword">extends</span> <span class="title class_">Finery2</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;T恤 &quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jeans</span> <span class="keyword">extends</span> <span class="title class_">Finery2</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;牛仔裤 &quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jacket</span> <span class="keyword">extends</span> <span class="title class_">Finery2</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;夹克 &quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><blockquote>
<p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
</blockquote>
<h2 id="设计要点-14"><a href="#设计要点-14" class="headerlink" title="设计要点"></a>设计要点</h2><p>中介者（Mediator）</p>
<p>具体中介（ConcreteMediator） 如果不存在拓展 可以与 Mediator 合并</p>
<p>类A 类 B 互相不了解，通过 ConcreteMediator 交互</p>
<h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><blockquote>
<p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
</blockquote>
<p><strong>核心思想</strong></p>
<p>可以在不改变数据结构的前提下定义作用于这些元素的新操作。将数据结构和操作（或算法）进行解耦，而且能更方便地拓展新的操作</p>
<p>访问者模式适用于数据结构相对稳定的系统，目的是要把处理从数据结构分离出来，当系统有稳定的数据结构，又有易于变化的算法时，可以使用访问者模式，访问模式使得算法的操作变得容易</p>
<h2 id="设计要点-15"><a href="#设计要点-15" class="headerlink" title="设计要点"></a>设计要点</h2><p>对象结构（ObjectStructure）:数据结构的管理类，数据对象的一个容器，访问容器内的所有对象</p>
<p>访问者（Visitor）：访问者类，对数据节点进行访问操作</p>
<p>通常使用访问者的子类定义某一种操作用于操作数据对象，使用时将要操作的对象存入对象结构，在容器内遍历时访问操作对象</p>
<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><blockquote>
<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
</blockquote>
<h2 id="设计要点-16"><a href="#设计要点-16" class="headerlink" title="设计要点"></a>设计要点</h2><p>核心就是一个 Clone 方法，Clone 方法的功能就是拷贝父本的所有属性：</p>
<ol>
<li>分配一块新的内存空间给新的拷贝对象</li>
<li>拷贝父本对象的所有属性</li>
</ol>
<h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><p>当拷贝父本有属性为引用对象时存在的问题。</p>
<p>采用浅拷贝是指只拷贝引用对象的指针，不拷贝引用类型对象指向的值。</p>
<p>深拷贝是指同时拷贝引用对象及其指向的指。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>通用技术</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Redis 一些问题的记录</title>
    <url>/2023/05/08/redis/</url>
    <content><![CDATA[<p><strong>Redis 介绍 和 一些使用场景</strong></p>
<p>redis是一个高性能的nosql存储系统，可以用来实现缓存、会话管理、消息队列等场景，使用redis存储经常访问的数据，可以减少对数据库的访问，因为redis的QPS远超mysql，也提升了数据响应的速度，同时使用redis进行分布式session的存储，在使用多服务器时提供用户登录在不同的服务器上时不会出现重新登录的情况，以及session的同步数据共享</p>
<p><strong>Redis支持哪些常见的数据结构？它们各自适用于哪些场景？</strong></p>
<p>redis 有 五种基础的数据结构 string字符串，list列表，set无序集合，hash散列表，zset有序集合。 </p>
<p>string使用的比较常见的场景就是常规数据的缓存比如字符串，数字，图片，序列化后的对象，记录单位时间内用户的请求用来制作简单的限流，记录页面单位时间内的访问次数，还有用来做分布式锁，绝大部分对象用string存储也就够了。</p>
<p> set可以用来存储一些不能重复的数据比如文章用户点赞，可以用来对一些数据求交集并集和差集的场景还有可以用来获取随机的场景比如随机抽奖。 </p>
<p>hash可以用来存储频繁修改的数据。</p>
<p><strong>Redis提供了哪两种类型的持久化方式？它们之间有什么区别？在使用中，更倾向于选择哪一种持久化方式？</strong></p>
<p>redis 提供了 AOF、 RDB 还有  AOF和RDB两种方式混合的持久化机制，ROB是将数据以快照的形式存储在本地，配置中每一段时间发生了一定次数的修改就会创建快照保存数据副本，AOF是以操作日志的方式追加到文件，在每一条更改了redis中数据的命令之后，这条命令就会被写入AOF缓存区然后写入到AOF文件中，最后根据同步策略决定什么时候将数据保存到硬盘。</p>
<p>两种方式各有优缺点，rdb使用压缩后的二进制数据，保存某个时间的数据集，文件小，适合做数据的备份和灾难恢复，而且使用rdb还原数据，可以直接解析还原，速度很快，但是rdb的安全性不如aof，无法做到实时的持久化数据，生成rdb文件的过程虽然使用了子进程，不会阻塞主进程，但也会对机器的cpu和内存造成影响，造成服务器宕机。aof的文件存储时只写入一条命令，支持秒级恢复，操作更加迅速，是命令文件也更好的分析文件内容，但是在恢复时执行所有命令，恢复时间长，存储大量命令，文件也更大</p>
<p>所以一般使用AOF和RDB两种方式混合的持久化，可以保证保存的数据的安全性，以及RDB快照可以更快的进行数据库备份重启。</p>
<p><strong>Redis主从复制的原理，应用场景和好处。</strong></p>
<p>原理：AOF和RDB保证了数据的可用性，保证redis宕机时，数据不丢失或只丢失一点，但是如果服务器宕机了，在数据恢复这段时间是无法处理请求的，如果硬盘出现故障，数据也会丢失，主从复制就是为了处理这种情况，实际上就是多台redis服务器，同时保持数据的一致性和每台服务器的数据的读写操作，在分出redis主服务器和从服务器之后，从服务器会对主服务器进行同步，由从服务器向主服务器建立连接，然后主服务器执行bgsave生成一个rdb文件发送给从服务器，从服务器清除数据执行rdb文件完成同步，在之后每次新写命令发生时，主服务器也会发送到从服务器，以此完成同步。</p>
<p>使用主从复制可以实现读写分离，在读的频率大于写，单机redis无法应付大量的读请求时，利用从服务器进行读，主服务器进行写，可以缓解这种情况。</p>
<p>主从复制还提供了故障恢复能力，当主服务器宕机时，可以自动切换到从服务器来保证服务的可用性。</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
